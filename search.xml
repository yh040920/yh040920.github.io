<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>合照</title>
      <link href="/post/ac4b0e36.html"/>
      <url>/post/ac4b0e36.html</url>
      
        <content type="html"><![CDATA[<p><img src="ac4b0e36/LKTE5156.JPEG"></p><p><img src="ac4b0e36/TNIA2774.JPEG"></p><p><img src="ac4b0e36/UMNS4631.JPEG"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>手势识别控制电脑音量大小</title>
      <link href="/post/ca617ee7.html"/>
      <url>/post/ca617ee7.html</url>
      
        <content type="html"><![CDATA[<p><strong>简单版</strong>的手掌检测控制电脑音量</p><h1 id="所需库"><a href="#所需库" class="headerlink" title="所需库"></a>所需库</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">opencv-python <span class="number">4.5</span><span class="number">.3</span><span class="number">.56</span></span><br><span class="line">mediapipe<span class="number">0.8</span><span class="number">.7</span><span class="number">.3</span> <span class="comment"># 手势识别</span></span><br><span class="line">pycaw <span class="number">20181226</span> <span class="comment"># 音量控制</span></span><br><span class="line">numpy<span class="number">1.19</span><span class="number">.5</span> <span class="comment"># 线性插值函数</span></span><br></pre></td></tr></table></figure><h1 id="导入所有库"><a href="#导入所有库" class="headerlink" title="导入所有库"></a>导入所有库</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> mediapipe <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> cast, POINTER</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> comtypes <span class="keyword">import</span> CLSCTX_ALL</span><br><span class="line"><span class="keyword">from</span> pycaw.pycaw <span class="keyword">import</span> AudioUtilities, IAudioEndpointVolume</span><br></pre></td></tr></table></figure><h1 id="电脑音量相关"><a href="#电脑音量相关" class="headerlink" title="电脑音量相关"></a>电脑音量相关</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devices = AudioUtilities.GetSpeakers()</span><br><span class="line">interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, <span class="literal">None</span>)</span><br><span class="line">volume = cast(interface, POINTER(IAudioEndpointVolume)) <span class="comment"># volume的方法用于获得电脑音量最大最小值，和改变当前音量值</span></span><br><span class="line">vr = volume.GetVolumeRange() <span class="comment"># 获取当前电脑音量的最大值和最小值,vr:(-96.0, 0.0, 1.5) 第一个值是最小值，最大值为0.0</span></span><br></pre></td></tr></table></figure><h1 id="手掌检测函数"><a href="#手掌检测函数" class="headerlink" title="手掌检测函数"></a>手掌检测函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mp_drawing = mp.solutions.drawing_utils <span class="comment"># mediapipe自带的关键点链接函数</span></span><br><span class="line">mp_hands = mp.solutions.hands</span><br><span class="line">hands = mp_hands.Hands(</span><br><span class="line">    static_image_mode=<span class="literal">False</span>,</span><br><span class="line">    max_num_hands=<span class="number">2</span>,</span><br><span class="line">    min_detection_confidence=<span class="number">0.5</span>,</span><br><span class="line">    min_tracking_confidence=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p>mp_hands.Hands是检测手部关键点的函数，其中有4个输入参数量可以选择:</p><p>1、static_image_mode：默认为False，如果设置为false, 就是把输入看作一个视频流，在检测到手之后对手加了一个目标跟踪，无需调用另一次检测，直到失去对任何手的跟踪为止。如果设置为True，则手部检测将在每个输入图像上运行，适合处理一批静态的，不相关的图像。<strong>如果检测的是一些图片就要设置成True</strong>。</p><p>2、max_num_hands:可以检测到的手的数量最大值，默认是2</p><p>3、min_detection_confidence: 手部检测的最小置信度值，大于这个数值被认为是成功的检测。默认为0.5</p><p>4、min_tracking_confidence：目标踪模型的最小置信度值，大于这个数值将被视为已成功跟踪的手部，默认为0.5，如果static_image_mode设置为true，则忽略此操作。</p><h2 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">results = hands.process(frame)</span><br><span class="line"><span class="built_in">print</span>(results.multi_handedness) </span><br><span class="line"><span class="built_in">print</span>(results.multi_hand_landmarks)</span><br></pre></td></tr></table></figure><p>results.multi_handedness返回值里面包括手掌的label和score，label是字符串”Left”或”Right”，score是置信度</p><p>results.multi_hand_landmarks: 手部21个关键点的位置信息，包括x,y,z 其中x,y是归一化后的坐标，也就是占原图长宽的百分比。z代表地标深度，以手腕处的深度为原点，自行理解。</p><p><img src="ca617ee7/png_1.png" alt="png_1.png"></p><h1 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>) <span class="comment"># 创建摄像头，有多个摄像头需要对应得参数，默认一个为0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ret, frame = cap.read() <span class="comment"># frame为获得的一帧图片</span></span><br><span class="line">    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) <span class="comment"># 将BGR转为RGB图像</span></span><br><span class="line">    results = hands.process(frame) <span class="comment"># 输入手掌检测模型，得到结果</span></span><br><span class="line">    frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR) <span class="comment"># 将颜色通道转回去</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> results.multi_hand_landmarks: <span class="comment"># 如果有21个点为信息，及检测到有手掌</span></span><br><span class="line">        <span class="keyword">for</span> hand_landmarks <span class="keyword">in</span> results.multi_hand_landmarks: <span class="comment"># 取出21个点</span></span><br><span class="line">            x1 = hand_landmarks.landmark[<span class="number">4</span>].x * frame.shape[<span class="number">1</span>] <span class="comment"># 取出大拇指对应的x归一化值与图像的横坐标相乘得到x的真值，注意frame.shape的第二个值为x</span></span><br><span class="line">            y1 = hand_landmarks.landmark[<span class="number">4</span>].y * frame.shape[<span class="number">0</span>] <span class="comment"># 取出大拇指对应的y归一化值与图像的纵坐标相乘得到y的真值，注意frame.shape的第一个值为y</span></span><br><span class="line">            x2 = hand_landmarks.landmark[<span class="number">8</span>].x * frame.shape[<span class="number">1</span>] <span class="comment"># 与拇指一样操作食指</span></span><br><span class="line">            y2 = hand_landmarks.landmark[<span class="number">8</span>].y * frame.shape[<span class="number">0</span>]</span><br><span class="line">            frame = cv2.line(img=frame, pt1=(<span class="built_in">int</span>(x1), <span class="built_in">int</span>(y1)), pt2=(<span class="built_in">int</span>(x2), <span class="built_in">int</span>(y2)), color=(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), thickness=<span class="number">3</span>) <span class="comment"># 在食指和拇指之间画一条线</span></span><br><span class="line">            distance = ((x1 - x2) ** <span class="number">2</span> + (y1 - y2) ** <span class="number">2</span>) ** <span class="number">0.5</span> <span class="comment"># 计算食指和拇指之间的距离</span></span><br><span class="line">            <span class="keyword">if</span> <span class="number">20</span> &lt; distance &lt; <span class="number">280</span>: <span class="comment"># 如果距离小于280且大于20（像素）</span></span><br><span class="line">                vol = np.interp(distance, [<span class="number">20</span>, <span class="number">280</span>], [vr[<span class="number">0</span>], vr[<span class="number">1</span>]])  <span class="comment"># 音量的映射转换，将20-280的距离映射到音量</span></span><br><span class="line">                volBar = np.interp(distance, [<span class="number">20</span>, <span class="number">280</span>], [<span class="number">400</span>, <span class="number">150</span>])  <span class="comment"># 音量条的转换映射</span></span><br><span class="line">                volPer = np.interp(distance, [<span class="number">20</span>, <span class="number">280</span>], [<span class="number">0</span>, <span class="number">100</span>])  <span class="comment"># 转换百分比映射</span></span><br><span class="line"></span><br><span class="line">                volume.SetMasterVolumeLevel(vol, <span class="literal">None</span>)  <span class="comment"># 设置声音大小</span></span><br><span class="line"></span><br><span class="line">                cv2.rectangle(frame, (<span class="number">30</span>, <span class="number">150</span>), (<span class="number">60</span>, <span class="number">400</span>), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">20</span>), <span class="number">3</span>)  <span class="comment"># 画一个矩形</span></span><br><span class="line">                cv2.rectangle(frame, (<span class="number">30</span>, <span class="built_in">int</span>(volBar)), (<span class="number">60</span>, <span class="number">400</span>), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">20</span>), cv2.FILLED)  <span class="comment"># 填充矩形</span></span><br><span class="line"></span><br><span class="line">                cv2.putText(frame, <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">str</span>(<span class="built_in">int</span>(volPer))&#125;</span>%&quot;</span>, (<span class="number">20</span>, <span class="number">430</span>), cv2.FONT_HERSHEY_PLAIN, <span class="number">2</span>,  <span class="comment"># 位置, 字体, 比例</span></span><br><span class="line">                            (<span class="number">255</span>, <span class="number">255</span>, <span class="number">20</span>), <span class="number">2</span>)  <span class="comment"># BGR颜色, 线的宽度</span></span><br><span class="line">            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS) <span class="comment"># 关键点可视化</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;MediaPipe Hands&#x27;</span>, frame)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cap.release() <span class="comment"># 释放摄像头</span></span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ul><li>学习了mediapipe的手掌识别方法的调用等，掌握了参数和其返回值的意义，并将返回值与音量控制函数结合实现根据识别大拇指和食指间的距离控制电脑音量大小。</li><li>学习了np的一维线性插值函数np.interp(x, x_, y)，简单理解就是将x_与y建立一定关系，输入新的x时，对照在x_中的值在y中取到对应值。</li></ul><h1 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> mediapipe <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> cast, POINTER</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> comtypes <span class="keyword">import</span> CLSCTX_ALL</span><br><span class="line"><span class="keyword">from</span> pycaw.pycaw <span class="keyword">import</span> AudioUtilities, IAudioEndpointVolume</span><br><span class="line"></span><br><span class="line">devices = AudioUtilities.GetSpeakers()</span><br><span class="line">interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, <span class="literal">None</span>)</span><br><span class="line">volume = cast(interface, POINTER(IAudioEndpointVolume))</span><br><span class="line">vr = volume.GetVolumeRange()</span><br><span class="line"></span><br><span class="line">mp_drawing = mp.solutions.drawing_utils</span><br><span class="line">mp_hands = mp.solutions.hands</span><br><span class="line">hands = mp_hands.Hands(</span><br><span class="line">    static_image_mode=<span class="literal">False</span>,</span><br><span class="line">    max_num_hands=<span class="number">2</span>,</span><br><span class="line">    min_detection_confidence=<span class="number">0.5</span>,</span><br><span class="line">    min_tracking_confidence=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)</span><br><span class="line">    results = hands.process(frame)</span><br><span class="line">    frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> results.multi_hand_landmarks:</span><br><span class="line">        <span class="keyword">for</span> hand_landmarks <span class="keyword">in</span> results.multi_hand_landmarks:</span><br><span class="line">            x1 = hand_landmarks.landmark[<span class="number">4</span>].x * frame.shape[<span class="number">1</span>]</span><br><span class="line">            y1 = hand_landmarks.landmark[<span class="number">4</span>].y * frame.shape[<span class="number">0</span>]</span><br><span class="line">            x2 = hand_landmarks.landmark[<span class="number">8</span>].x * frame.shape[<span class="number">1</span>]</span><br><span class="line">            y2 = hand_landmarks.landmark[<span class="number">8</span>].y * frame.shape[<span class="number">0</span>]</span><br><span class="line">            frame = cv2.line(img=frame, pt1=(<span class="built_in">int</span>(x1), <span class="built_in">int</span>(y1)), pt2=(<span class="built_in">int</span>(x2), <span class="built_in">int</span>(y2)), color=(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), thickness=<span class="number">3</span>)</span><br><span class="line">            distance = ((x1 - x2) ** <span class="number">2</span> + (y1 - y2) ** <span class="number">2</span>) ** <span class="number">0.5</span></span><br><span class="line">            <span class="keyword">if</span> <span class="number">20</span> &lt; distance &lt; <span class="number">280</span>:</span><br><span class="line">                vol = np.interp(distance, [<span class="number">20</span>, <span class="number">280</span>], [vr[<span class="number">0</span>], vr[<span class="number">1</span>]])  <span class="comment"># 音量的映射转换，将20-280的距离映射到音量</span></span><br><span class="line">                volBar = np.interp(distance, [<span class="number">20</span>, <span class="number">280</span>], [<span class="number">400</span>, <span class="number">150</span>])  <span class="comment"># 音量条的转换映射</span></span><br><span class="line">                volPer = np.interp(distance, [<span class="number">20</span>, <span class="number">280</span>], [<span class="number">0</span>, <span class="number">100</span>])  <span class="comment"># 转换百分比映射</span></span><br><span class="line"></span><br><span class="line">                volume.SetMasterVolumeLevel(vol, <span class="literal">None</span>)  <span class="comment"># 设置声音大小</span></span><br><span class="line"></span><br><span class="line">                cv2.rectangle(frame, (<span class="number">30</span>, <span class="number">150</span>), (<span class="number">60</span>, <span class="number">400</span>), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">20</span>), <span class="number">3</span>)  <span class="comment"># 画一个矩形</span></span><br><span class="line">                cv2.rectangle(frame, (<span class="number">30</span>, <span class="built_in">int</span>(volBar)), (<span class="number">60</span>, <span class="number">400</span>), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">20</span>), cv2.FILLED)  <span class="comment"># 填充矩形</span></span><br><span class="line"></span><br><span class="line">                cv2.putText(frame, <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">str</span>(<span class="built_in">int</span>(volPer))&#125;</span>%&quot;</span>, (<span class="number">20</span>, <span class="number">430</span>), cv2.FONT_HERSHEY_PLAIN, <span class="number">2</span>,  <span class="comment"># 位置, 字体, 比例</span></span><br><span class="line">                            (<span class="number">255</span>, <span class="number">255</span>, <span class="number">20</span>), <span class="number">2</span>)  <span class="comment"># BGR颜色, 线的宽度</span></span><br><span class="line">            <span class="comment"># 关键点可视化</span></span><br><span class="line">            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;MediaPipe Hands&#x27;</span>, frame)</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cap.release()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/post/a378bd8e.html"/>
      <url>/post/a378bd8e.html</url>
      
        <content type="html"><![CDATA[<h1 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h1><p>Python使用缩进(通常4个空格)来定义代码块,代替其他语言中的大括号。缩进的使用有以下要点:</p><ol><li><p>同一个代码块的语句必须使用相同的缩进。例如if语句块内的所有语句要有相同缩进。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 子代码块要比父代码块进一级缩进。例如<span class="keyword">if</span>语句块内的<span class="keyword">for</span>循环要比<span class="keyword">if</span>语句块缩进一级。</span><br><span class="line"></span><br><span class="line">   ```python</span><br><span class="line">   <span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;foo&#x27;</span>) </span><br><span class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">           <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 缩进的空格数是可变的,但同一个代码块要使用固定数目的空格缩进。通常使用<span class="number">4</span>个空格。</span><br><span class="line"></span><br><span class="line">   ```python</span><br><span class="line">   <span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 可以使用制表符(Tab键)替代空格缩进,但是不推荐这种做法。因为不同环境下Tab键的缩进空格数可能不同,会导致代码混乱。</span><br><span class="line"></span><br><span class="line">   ```python</span><br><span class="line">   <span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 函数或者类的定义,都由其代码块构成,要使用缩进。函数、类是代码块的单位。</span><br><span class="line"></span><br><span class="line">   ```python</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">       <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):</span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 注意连续行的缩进要保持一致。可以使用反斜杠\进行换行。</span><br><span class="line"></span><br><span class="line">   ```python</span><br><span class="line">   <span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;foo&#x27;</span>) \</span><br><span class="line">           .upper()</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 建议在IDE中启用显示空格和制表符选项,以便清楚地观察代码缩进。</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> 缩进错误会导致IndentationError异常。</span><br><span class="line"></span><br><span class="line">   ```python</span><br><span class="line">     File <span class="string">&quot;test.py&quot;</span>, line <span class="number">2</span></span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">       ^</span><br><span class="line">   IndentationError: expected an indented block</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量  </span></span><br><span class="line"></span><br><span class="line">好的,我来对Python变量部分进行补充和完善,并给出适当的示例代码:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> Python变量名可以包含字母、数字和下划线,但不能以数字开头</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">name = <span class="string">&quot;John&quot;</span>   <span class="comment"># 正确</span></span><br><span class="line">1name = <span class="string">&quot;John&quot;</span>  <span class="comment"># 错误,不能以数字开头</span></span><br><span class="line"></span><br><span class="line">my_name = <span class="string">&quot;John&quot;</span> <span class="comment"># 下划线字符合法</span></span><br></pre></td></tr></table></figure></li><li><p>Python变量名对大小写敏感</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line">Age = <span class="number">30</span> <span class="comment"># age和Age是不同的变量</span></span><br></pre></td></tr></table></figure><ol start="3"><li>可以使用中文字符或其他Unicode字符作为变量名,但不推荐</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">中文名 = <span class="string">&quot;张三&quot;</span> <span class="comment"># 合法但不推荐使用</span></span><br></pre></td></tr></table></figure><ol start="4"><li>变量在使用前必须先赋值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(name) <span class="comment"># 错误,未定义的变量</span></span><br><span class="line">name = <span class="string">&quot;John&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(name) <span class="comment"># 正确</span></span><br></pre></td></tr></table></figure><ol start="5"><li>可以使用多变量赋值语句</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br></pre></td></tr></table></figure><ol start="6"><li>可以使用字典或序列解包进行多变量赋值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = &#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>, <span class="string">&quot;b&quot;</span>:<span class="number">2</span>, <span class="string">&quot;c&quot;</span>:<span class="number">3</span>&#125; <span class="comment"># 字典解包</span></span><br><span class="line">a, b, c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment"># 序列解包</span></span><br></pre></td></tr></table></figure><ol start="7"><li>变量作用域:全局变量和局部变量</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># global_var 是全局变量</span></span><br><span class="line">global_var = <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="comment"># local_var 是局部变量</span></span><br><span class="line">    local_var = <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(local_var)</span><br><span class="line">    </span><br><span class="line">func()</span><br><span class="line"><span class="built_in">print</span>(global_var) <span class="comment"># 可以访问全局变量</span></span><br><span class="line"><span class="built_in">print</span>(local_var) <span class="comment"># 错误,不能访问局部变量</span></span><br></pre></td></tr></table></figure><h1 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h1><p>Python中有一些保留字,不能用于普通标识符(即变量名、函数名等)。这是因为这些保留字在Python语言中具有特殊含义。</p><p>包括：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">False      class       finally    is         return  </span><br><span class="line">None       continue    for        lambda     try      </span><br><span class="line">True       def         from       nonlocal   while    </span><br><span class="line">and        del         global     not        with     </span><br><span class="line">as         elif        if         or         yield    </span><br><span class="line">assert     else        import     pass               </span><br><span class="line">break      except      in         raise  </span><br></pre></td></tr></table></figure><ul><li>关键字:if、else、for、while、def、class、yield、return、break、continue、pass 等。这些具有语法含义的单词不能用作变量名、函数名或者其他标识符。</li><li>布尔值: True、False</li><li>非值:None</li><li>异常:try、except、finally、raise</li><li>导入:import、from</li><li>作用域控制:global、nonlocal</li><li>其他:and、or、not、is、in 等。</li></ul><p>使用保留字作为普通标识符会导致SyntaxError的错误。例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">class</span>():   <span class="comment"># SyntaxError: invalid syntax</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>因为<code>class</code>是Python的保留字,不能用作函数名。所以在命名变量、函数或者其他标识符时,要注意不要使用这些保留字,以免发生语法错误。如果真的需要,可以在名称后面加上下划线以示区别,例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">class_</span>():  </span><br><span class="line">    <span class="keyword">pass</span>   <span class="comment"># 这是可以的</span></span><br></pre></td></tr></table></figure><p>总之,记住Python的保留字列表,在命名的时候避免使用这些保留字,这可以帮助你避免很多语法错误。</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>Python有数值(int, float)、字符串(str)、列表(list)、元组(tuple)、字典(dict)、集合(set)等类型。</p><h2 id="数值-int-float"><a href="#数值-int-float" class="headerlink" title="数值(int, float)"></a>数值(int, float)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. int:整数类型,支持任意大小的整数。可以用十进制,二进制,八进制,十六进制表示。例如:</span></span><br><span class="line">a = <span class="number">10</span>     <span class="comment"># 十进制</span></span><br><span class="line">b = <span class="number">0b10</span>   <span class="comment"># 二进制</span></span><br><span class="line">c = <span class="number">0o10</span>   <span class="comment"># 八进制 </span></span><br><span class="line">d = <span class="number">0x10</span>   <span class="comment"># 十六进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. float:浮点数类型,支持单精度和双精度。可以用科学计数法表示。例如:</span></span><br><span class="line">a = <span class="number">3.14</span></span><br><span class="line">b = <span class="number">3.14e2</span>  <span class="comment"># 314.0</span></span><br><span class="line">c = <span class="number">3.14E-2</span> <span class="comment"># 0.0314</span></span><br></pre></td></tr></table></figure><h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p>两个整数相除只能得到浮点数,要获取整数必须使用整数除法//。例如:<code>9/2 = 4.5, 9//2 = 4</code></p><p>要判断一个整数是否可以被整除,使用%取余运算。例如:<code>9%2 = 1, 8%2 = 0</code></p><p>普通运算：<code>+ - * / **</code>&emsp;两个*是次方的意思，比如2**2就等于4</p><h3 id="进制转换（了解）"><a href="#进制转换（了解）" class="headerlink" title="进制转换（了解）"></a>进制转换（了解）</h3><p>在Python中,可以很容易地进行进制转换。主要有以下几种进制转换:1. 十进制转二进制、八进制、十六进制，可以使用 bin()、oct()、hex() 函数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bin</span>(<span class="number">10</span>)   <span class="comment"># &#x27;0b1010&#x27;  十进制10转二进制</span></span><br><span class="line"><span class="built_in">oct</span>(<span class="number">10</span>)   <span class="comment"># &#x27;0o12&#x27;    十进制10转八进制 </span></span><br><span class="line"><span class="built_in">hex</span>(<span class="number">10</span>)   <span class="comment"># &#x27;0xa&#x27;     十进制10转十六进制</span></span><br></pre></td></tr></table></figure><p>二进制、八进制、十六进制转十进制<br>可以使用 int() 函数,传入对应的进制的字符串:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;0b1010&#x27;</span>, <span class="number">2</span>)  <span class="comment"># 10     二进制转十进制</span></span><br><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;0o12&#x27;</span>, <span class="number">8</span>)    <span class="comment"># 10     八进制转十进制</span></span><br><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;0xa&#x27;</span>, <span class="number">16</span>)    <span class="comment"># 10     十六进制转十进制</span></span><br></pre></td></tr></table></figure><p>二进制转八进制、十六进制<br>可以先转十进制,再从十进制转到其他进制:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bin</span>(<span class="number">0b1010</span>)     <span class="comment"># &#x27;0b1010&#x27;</span></span><br><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;0b1010&#x27;</span>, <span class="number">2</span>) <span class="comment"># 10 </span></span><br><span class="line"><span class="built_in">oct</span>(<span class="number">10</span>)         <span class="comment"># &#x27;0o12&#x27;   十进制转八进制</span></span><br><span class="line"><span class="built_in">hex</span>(<span class="number">10</span>)         <span class="comment"># &#x27;0xa&#x27;    十进制转十六进制</span></span><br></pre></td></tr></table></figure><p>八进制、十六进制转二进制<br>同样先转十进制,再从十进制转二进制:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">oct</span>(<span class="string">&#x27;0o12&#x27;</span>)   <span class="comment"># &#x27;0o12&#x27;</span></span><br><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;0o12&#x27;</span>, <span class="number">8</span>) <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">bin</span>(<span class="number">10</span>)       <span class="comment"># &#x27;0b1010&#x27;    十进制转二进制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">hex</span>(<span class="string">&#x27;0xa&#x27;</span>)    <span class="comment"># &#x27;0xa&#x27;</span></span><br><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;0xa&#x27;</span>, <span class="number">16</span>) <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">bin</span>(<span class="number">10</span>)       <span class="comment"># &#x27;0b1010&#x27;    十进制转二进制</span></span><br></pre></td></tr></table></figure><p>综上,Python的进制转换主要依靠bin()、oct()、hex()和int()函数实现。首先将其他进制转十进制,然后再从十进制转到任意进制。理解了进制转换的原理及Python的实现,可以很容易地进行各种进制之间的转换。</p><h2 id="字符串-str"><a href="#字符串-str" class="headerlink" title="字符串(str)"></a>字符串(str)</h2><p>在Python中,字符串是以unicode字符序列形式表示的。可以使用单引号(‘)或双引号(“)来表示字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;a&quot;</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h3><p>可以使用[]来索引和切片字符串,索引从0开始,到字符串长度-1。切片的形式是[起始:结束:步长]。<strong>注意：包括起始不包括结束</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>: <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>: <span class="number">4</span>: <span class="number">2</span>]) <span class="comment"># 从索引0开始一次向后走两个数到索引4之前停止</span></span><br><span class="line"><span class="built_in">print</span>(a[: <span class="number">4</span>]) <span class="comment"># 第一个参数为空表示结束索引之前的所有值都取</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>: ])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">12</span></span><br><span class="line"><span class="string">13</span></span><br><span class="line"><span class="string">1234</span></span><br><span class="line"><span class="string">123456</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><p>可以使用len()函数获取字符串长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="在字符串中加入外部变量"><a href="#在字符串中加入外部变量" class="headerlink" title="在字符串中加入外部变量"></a>在字符串中加入外部变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;World&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello %s&quot;</span> % a) <span class="comment"># 变量a填充%s位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello &#123;&#125;&quot;</span>.<span class="built_in">format</span>(a)) <span class="comment"># 变量a填充&#123;&#125;位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Hello <span class="subst">&#123;a&#125;</span>&quot;</span>) <span class="comment"># 变量a直接塞入&#123;&#125;里面</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">Hello World</span></span><br><span class="line"><span class="string">Hello World</span></span><br><span class="line"><span class="string">Hello World</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;io-u&quot;</span></span><br><span class="line">s.find(<span class="string">&#x27;o&#x27;</span>)   <span class="comment"># 查找字符串中o的位置 输出：1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;-&#x27;</span>.join([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]) <span class="comment"># a-b-c</span></span><br><span class="line"></span><br><span class="line">s.split(<span class="string">&#x27;-&#x27;</span>) <span class="comment"># 将字符串按-分割 输出： [&#x27;io&#x27;, &#x27;u&#x27;]</span></span><br><span class="line"></span><br><span class="line">s.replace(<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 将所有的o替换为a 输出：ia-u</span></span><br><span class="line"></span><br><span class="line">s.startswith(<span class="string">&#x27;he&#x27;</span>) <span class="comment"># 是否以he开头 输出：False</span></span><br><span class="line"></span><br><span class="line">s.endswith(<span class="string">&#x27;.py&#x27;</span>) <span class="comment"># 是否以.py结尾 输出 False</span></span><br></pre></td></tr></table></figure><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>在Python字符串中,可以使用转义字符来表示一些<strong>无法直接输入的字符</strong>,或是改变字符的含义。</p><p>Python支持的转义字符有: \n:换行符     \t:制表符    \:反斜杠字符     \‘:单引号字符     \“:双引号字符     \r:回车符     \f:换页符     \b:退格符     \v:纵向制表符     \a:警报响铃符     \xhh:十六进制的字符,hh指的是十六进制的ascii码 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\nworld&#x27;</span>)  <span class="comment"># hello  </span></span><br><span class="line">                         <span class="comment"># world</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\tworld&#x27;</span>)  <span class="comment"># hello   world   </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\\world&#x27;</span>)  <span class="comment"># hello\world</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\&#x27;world&#x27;</span>) <span class="comment"># hello&#x27;world   </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\&quot;world&#x27;</span>) <span class="comment"># hello&quot;world</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\x41&#x27;</span>)        <span class="comment"># A</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\u4f60\u597d&#x27;</span>) <span class="comment"># 你好</span></span><br></pre></td></tr></table></figure><h3 id="字符串是字符序列"><a href="#字符串是字符序列" class="headerlink" title="字符串是字符序列"></a>字符串是字符序列</h3><p>可以使用[]来获取单个字符,也可以用for循环来遍历每个字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;abcde&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&quot;&quot;</span>) <span class="comment"># end参数是用于调整print输出末尾默认换行的问题 end=&#x27;&#x27;表示末尾不换行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">abcde</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表(list)是Python中最基本的数据结构之一。<strong>列表可以包含不同类型的元素</strong>,元素之间使用逗号分隔,用<code>list(x)</code>函数可以将大部分可迭代结构x转化为列表。</p><p>列表相关操作有:</p><ul><li><p>创建列表:使用[]创建,例如<code>a = [1, 2, 3]</code></p></li><li><p>访问列表元素:使用索引,列表索引从0开始,例如<code>a[0] = 1</code></p></li><li><p>修改列表元素:直接对索引元素重新赋值,例如<code>a[0] = 2</code></p></li><li><p>删除列表元素:使用del语句,例如<code>del a[0]</code> 删除后a数组变为[2, 3]</p></li><li><p>列表切片:使用[:]表示切片,例如<code>b = a[1:3]</code>取出索引1到2的元素，可以参考字符串切片。</p></li><li><p>向列表添加元素:使用append()方法在末尾添加,insert(i, x)在指定索引i添加x,例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a.append(<span class="number">4</span>)  <span class="comment"># a变为[1, 2, 3, 4]</span></span><br><span class="line">a.insert(<span class="number">1</span>, <span class="number">5</span>)  <span class="comment"># a变为[1, 5, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li><li><p>从列表删除元素:使用<code>remove(x)</code>删除列表中第一个值为x的元素,<code>pop(i)</code>删除指定索引i的元素,<code>pop()</code>删除最后一个元素,例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a.remove(<span class="number">2</span>)  <span class="comment"># a变为[1, 2]</span></span><br><span class="line">a.pop(<span class="number">1</span>)<span class="comment"># a变为[1]</span></span><br><span class="line">a.pop()<span class="comment"># a变为[]</span></span><br></pre></td></tr></table></figure></li><li><p> 列表排序:使用<code>sort()</code>方法或<code>sorted()</code>函数,例如<code>a.sort()</code>或<code>sorted(a)</code>默认升序</p></li><li><p>列表反转:a[::-1] 会把a列表中的元素前后颠倒变为：[3, 2, 1]</p></li><li><p>列表长度:使用len()函数</p></li><li><p>列表遍历:可以使用for循环遍历列表元素,例如:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="built_in">print</span>(num, end=<span class="string">&#x27;&#x27;</span>) </span><br><span class="line"><span class="comment"># 输出: 123</span></span><br></pre></td></tr></table></figure></li><li><p>列表连接:使用’+’或<code>extend()</code>方法,例如<code>a + [6, 7]</code>或<code>a.extend([6, 7])</code>  a变为[1, 2, 3, 6, 7]</p></li></ul><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组(tuple)是Python中的一种容器,和列表很相似,但是元组的元素不能修改。元组用小括号<code>()</code>定义。</p><p>元组的主要特点:</p><ol><li>元组中的元素不能修改(不能对元组进行添加、删除、修改元素操作)</li><li>元组是有序的</li><li> 元组可以作为字典的键(因为元组不可变)</li><li> 元组更轻量级,占用的空间小于列表</li></ol><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典(dict)是Python中另一个重要的数据结构。字典是一种映射类型,它的元素是键值对(key-value)。字典相关操作有:</p><ol><li><p>创建字典:使用{}创建,例如<code>dict1 = &#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</code></p></li><li><p>访问字典元素:使用[]访问,例如<code>dict1[&#39;a&#39;] = 1</code></p></li><li><p>修改或添加字典元素:直接对元素重新赋值或添加新元素,例如<code>dict1[&#39;a&#39;] = 2</code> 或 <code>dict1[&#39;c&#39;] = 3</code></p></li><li><p>删除字典元素:使用del语句,例如<code>del dict1[&#39;a&#39;]</code></p></li><li><p>字典长度:使用len()函数,例如<code>len(dict1)</code></p></li><li><p>字典遍历:可以使用for循环遍历键或键值对,例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dict1:</span><br><span class="line">    <span class="built_in">print</span>(key, end=<span class="string">&#x27;&#x27;</span>) <span class="comment"># 输出： a, b</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dict1.items():  </span><br><span class="line">    <span class="built_in">print</span>(key, value, end=<span class="string">&#x27;&#x27;</span>) <span class="comment"># 输出 a 1 b 2</span></span><br></pre></td></tr></table></figure></li><li><p>判断键是否存在:使用in关键字,例如<code>&#39;a&#39; in dict1</code> 返回True或者False</p></li><li><p>字典get方法:使用get(key)方法访问元素,可以设置默认值,例如<code>dict1.get(&#39;a&#39;, 0)</code></p></li><li><p>清空字典:使用clear()方法,例如<code>dict1.clear()</code></p></li><li><p>字典弹出元素:使用pop(key)方法,可以弹出指定键的元素,返回值为元素值,例如<code>dict1.pop(&#39;a&#39;)</code></p></li><li><p>fromkeys方法:使用fromkeys(seq, value)方法来快速生成一个字典,例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict2 = <span class="built_in">dict</span>.fromkeys([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="number">1</span>)</span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 1, &#x27;c&#x27;: 1&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>字典键值对的获取方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dict2 = <span class="built_in">dict</span>.fromkeys([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="number">1</span>)</span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 1, &#x27;c&#x27;: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(dict2.keys()))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(dict2.values()))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(dict2.items()))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="string">[1, 1, 1]</span></span><br><span class="line"><span class="string">[(&#x27;a&#x27;, 1), (&#x27;b&#x27;, 1), (&#x27;c&#x27;, 1)]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>字典的键可以是任意不可变类型,不仅限于字符串。值可以是任意类型。</strong></p></li></ol><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><ol><li>将整数转为浮点数:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x)) <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">float</span>(x)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x)) <span class="comment"># &lt;class &#x27;float&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>将浮点数转为整数:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">y = <span class="number">1.5</span> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(y)) <span class="comment"># &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">y = <span class="built_in">int</span>(y) </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(y)) <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>将字符串转为整数或浮点数:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;123&quot;</span></span><br><span class="line">x = <span class="built_in">int</span>(s) <span class="comment"># 123</span></span><br><span class="line">y = <span class="built_in">float</span>(s) <span class="comment"># 123.0</span></span><br></pre></td></tr></table></figure><ol start="4"><li>将整数转为字符串:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">123</span></span><br><span class="line">s = <span class="built_in">str</span>(a) <span class="comment"># &quot;123&quot;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>将列表转为元组:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] </span><br><span class="line">my_tuple = <span class="built_in">tuple</span>(my_list) <span class="comment"># (1, 2, 3)</span></span><br></pre></td></tr></table></figure><ol start="6"><li>将集合转为列表:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_set = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">my_list = <span class="built_in">list</span>(my_set) <span class="comment"># [1, 2, 3]  </span></span><br></pre></td></tr></table></figure><ol start="7"><li>将字符串转为列表:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;hello&quot;</span></span><br><span class="line">my_list = <span class="built_in">list</span>(s) <span class="comment"># [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span></span><br></pre></td></tr></table></figure><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>使用<code>#</code>单行注释和<code>&#39;&#39;&#39;</code>或<code>&quot;&quot;&quot;</code>多行注释。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是注释&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这是注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><p>if语句:用于判断条件,如果<strong>条件(condition)<strong>为True执行</strong>语句块(statements)</strong>,否则不执行。基本语法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition:</span><br><span class="line">    statements</span><br></pre></td></tr></table></figure><p>也可以添加else语句:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition:</span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    other_statements</span><br></pre></td></tr></table></figure><p>还可以添加elif语句:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition1:</span><br><span class="line">    statements </span><br><span class="line"><span class="keyword">elif</span> condition2:</span><br><span class="line">    other_statements</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    another_statements</span><br></pre></td></tr></table></figure><p><strong>特别注意</strong>：条件condition可以使用与或非，其中与：<code>a and b</code>a和b同时为true结果才为true, 非:<code>a is not b</code>a不是b则返回true, 或：<code>a or b</code>a或者b有一个为true就返回true。</p><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p> for循环语句:用于迭代序列(如列表、元组、字符串、字典、集合等)中的元素,或迭代一个范围的数字。基本语法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> iterable:</span><br><span class="line">    statements</span><br></pre></td></tr></table></figure><p>也可以结合range()函数迭代一个范围的数字:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  <span class="comment"># 迭代0-4</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p>在python中range用于生成可迭代的数列，用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  <span class="comment"># 迭代0-4</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">7</span>): <span class="comment"># 迭代0-6</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">7</span>, <span class="number">2</span>): <span class="comment"># 以2为步长迭代0-6</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h2><p>用于重复执行语句块,直到<strong>条件condition</strong>为False才停止。基本语法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition:</span><br><span class="line">    statements</span><br></pre></td></tr></table></figure><h2 id="break和continue语句"><a href="#break和continue语句" class="headerlink" title="break和continue语句"></a>break和continue语句</h2><p>用于控制循环语句的执行。</p><ul><li>break用于跳出循环体,结束循环。</li><li>continue用于跳过当前循环,开始下次循环。</li></ul><p><strong>注意：只能跳出一层循环，特别是在多重循环体中。</strong></p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数是Python内建的一种封装,允许你将相关代码段组织在一起,并且可以重复调用。</p><ol><li><p>定义函数:使用def关键词,例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>调用函数:直接使用函数名加括号调用,例如<code>func1()</code></p></li><li><p>参数:使用参数来传递值给函数。在函数定义中使用参数名即可,调用时传值,例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Hello <span class="subst">&#123;name&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">func2(<span class="string">&#x27;Jack&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>默认参数:使用=给参数指定默认值,例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func3</span>(<span class="params">name=<span class="string">&#x27;John&#x27;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Hello <span class="subst">&#123;name&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">func3()   <span class="comment"># Hello John</span></span><br><span class="line">func3(<span class="string">&#x27;Jack&#x27;</span>) <span class="comment"># Hello Jack</span></span><br></pre></td></tr></table></figure></li><li><p>返回值:使用return语句返回值,例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func6</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = func6(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)   <span class="comment"># 3</span></span><br></pre></td></tr></table></figure></li><li><p>作用域:Python有两个作用域,全局作用域和局部作用域。在函数内为局部作用域,全局作用域在函数外。</p></li><li><p><strong>匿名函数</strong>:使用lambda定义匿名函数,例如<code>lambda x: x * 2</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func = <span class="keyword">lambda</span> x: x * <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(func(<span class="number">2</span>))</span><br><span class="line">func_1 = <span class="keyword">lambda</span> x, y: x+y</span><br><span class="line"><span class="built_in">print</span>(func_1(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输出： </span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>类(class)是Python中实现对象化编程的主要工具。使用class关键词定义类,类中可以有方法和属性，是<strong>实现一类功能的集合</strong>。</p><ol><li><p>定义类:使用class关键词,例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>初始化方法:使用__init__方法初始化类,例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br></pre></td></tr></table></figure></li><li><p> 实例化:使用类名加()实例化一个类,例如<code>p = Person(&#39;Jack&#39;, 18)</code></p></li><li><p>访问属性:使用.访问属性,例如<code>p.name</code></p></li><li><p>方法:在类中定义方法,使用self参数,例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Hello, I am <span class="subst">&#123;self.name&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 注意：self可以简单理解为创建实例时p = Person(&#x27;Jack&#x27;, 18)的那个p，就是实列自己的意思</span></span><br></pre></td></tr></table></figure><p>调用方法使用.方法名(),例如<code>p.say_hello()</code></p></li><li><p>魔法方法:像__init__这样的方法被称为魔法方法,有__str__、__len__、__del__等。</p></li><li><p>面向对象三要素：继承，封装。</p></li></ol><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>使用<code>.py</code>文件定义,然后可以在其他地方<code>import</code>使用，简称调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  调用自带的数学操作库</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># 或者导入某一特定模块</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br></pre></td></tr></table></figure><p><strong>编译环境没有自带的库需要在终端进行pip下载</strong></p><h1 id="输入输出函数"><a href="#输入输出函数" class="headerlink" title="输入输出函数"></a>输入输出函数</h1><h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p>Python中的input()函数用于获取用户的输入。它的基本语法是:<code>input(prompt)</code></p><ul><li><p>prompt是可选的,用于输出一段 prompt 文字,以提示用户输入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;Please enter your name: &quot;</span>)</span><br></pre></td></tr></table></figure><p>这会输出<code>Please enter your name: </code>,等待用户输入,并将输入的值赋给变量name。</p></li></ul><p>input()函数总是<strong>将用户输入的值作为字符串返回</strong>,所以如果要使用数值,需要进行类型转换。例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please enter your age: &quot;</span>))</span><br></pre></td></tr></table></figure><p>这会将用户输入的字符串转换为整数。</p><p><strong>注意：</strong>input()在Python 2和Python 3中的行为有一定差异:</p><ul><li>在Python 2中,input()函数将输入的数据解释为Python表达式,并返回表达式的值。这可能会产生安全隐患。</li><li>在Python 3中,input()函数将输入的所有数据视为字符串,并返回字符串的值。这种行为更安全和直观。</li></ul><p>所以,在现代Python代码中,我们一般使用Python 3的input()函数。如果需要兼容Python 2,可以使用以下形式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="built_in">input</span>(<span class="string">&quot;Please enter your age: &quot;</span>)   <span class="comment"># Python 2版本</span></span><br><span class="line">age = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;Please enter your age: &quot;</span>))   <span class="comment"># Python 2兼容版本</span></span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please enter your age: &quot;</span>))   <span class="comment"># Python 3版本</span></span><br></pre></td></tr></table></figure><p>总结一下,Python中的input()函数用于:</p><pre><code>1. 提示用户输入</code></pre><ol start="2"><li>获取用户输入的值(总是字符串)</li><li>根据需要进行类型转换</li><li>Python 2与3的input()函数行为有差异,现代代码更推荐Python 3版本</li></ol><h2 id="print"><a href="#print" class="headerlink" title="print"></a>print</h2><p>Python中的print()函数用于输出内容到屏幕或其他标准输出流。它的基本语法是:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(value1, ..., valueN)  </span><br></pre></td></tr></table></figure><ul><li><p>value1 .. valueN 是要输出的字符串或对象,多个值会空格分隔。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;world&quot;</span>)   <span class="comment"># 输出Hello world </span></span><br></pre></td></tr></table></figure></li></ul><p>print()函数会在输出结束后自动加上换行符\n,所以每个print语句会在下一行开始输出。如果不想加换行符,可以在输出内容后加上end参数,<strong>参数为任意字符</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>, end=<span class="string">&quot;&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;world&quot;</span>)   <span class="comment"># 输出Hello world </span></span><br></pre></td></tr></table></figure><p>此外,print()函数还有其他参数可以使用:</p><ul><li>sep:用于设置输出值之间的分隔符,默认为空格。例如<code>print(1, 2, 3, sep=&quot;-&quot;)</code> 输出 <code>1-2-3</code>。</li><li>file:用于设置输出文件,默认为 sys.stdout。可以输出到文件以实现输出重定向。</li><li>flush:用于设置是否刷新输出缓冲区,默认为False。当file参数指向文件时,建议设置为True。</li></ul><p>格式化输出可以使用字符串格式化,或者f-string(在Python 3.6+)中进行。例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;John&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Hello, <span class="subst">&#123;name&#125;</span>&quot;</span>)  <span class="comment"># Python 3.6+ </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name))  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这会输出`Hello, John`。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>总结来说,Python中的print()函数用于:</p><ol><li>向屏幕或其他输出流输出内容</li><li>默认会加上换行符,可以通过end参数控制</li><li>可以设置输出值之间的分隔符sep</li><li>可以重定向输出到文件通过file参数</li><li>可以格式化字符串输出来输出变量值</li><li>Python 2的print支持小括号和逗号分隔,Python 3只支持小括号分隔 </li></ol><h1 id="Python常用库"><a href="#Python常用库" class="headerlink" title="Python常用库"></a>Python常用库</h1><h2 id="math"><a href="#math" class="headerlink" title="math"></a>math</h2><p>Python有一个内置的数学函数库math,提供了许多数学函数和常量。主要内容如下:</p><ol><li>绝对值和取整:- abs(x):取绝对值,x可以是整数或浮点数</li></ol><ul><li>ceil(x):ceil向上取整,返回≥x的最小整数 </li><li> floor(x):floor向下取整,返回≤x的最大整数</li><li>trunc(x):trunc截断,返回整数部分</li><li> round(x):round四舍五入,可以指定精度</li></ul><ol start="2"><li> 最大值和最小值:- fmax(x1, x2, …):返回参数中的最大值</li></ol><ul><li>fmin(x1, x2, …):返回参数中的最小值</li></ul><ol start="3"><li>幂和对数:- pow(x, y):x的y次幂</li></ol><ul><li>sqrt(x):取平方根</li><li>exp(x):e的x次幂</li><li>log(x):自然对数ln(x)</li><li>log10(x):以10为底的对数log10(x)</li></ul><ol start="4"><li> 三角函数:- sin(x):取正弦</li></ol><ul><li>cos(x):取余弦</li><li>tan(x):取正切</li><li>asin(x):取反正弦,返回值在[-pi/2, pi/2]之间</li><li>acos(x):取反余弦,返回值在[0, pi]之间</li><li>atan(x):取反正切,返回值在[-pi/2, pi/2]之间</li></ul><ol start="5"><li>角度和弧度互转:- degrees(x):将弧度转换为角度</li></ol><ul><li>radians(x):将角度转换为弧度</li></ul><ol start="6"><li> 数学常量:- pi:圆周率π,约等于3.14</li></ol><ul><li>e:自然常数e,约等于2.718</li></ul><ol start="7"><li>随机数:- random():随机一个[0, 1)范围内的浮点数</li></ol><ul><li>uniform(a, b):随机一个[a, b]范围内的浮点数</li><li>randint(a, b):随机一个[a, b]范围内的整数</li><li>choice(seq):随机从序列中选取一个元素</li><li>shuffle(seq):随机打乱序列中的元素</li></ul><h2 id="random"><a href="#random" class="headerlink" title="random"></a>random</h2><p>Python的Random模块可以生成各种随机数和随机选择数据。主要内容如下:</p><ol><li><p>random():随机生成[0.0, 1.0)范围内的浮点数,例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">random.random()  <span class="comment"># 0.udo3j24</span></span><br><span class="line">random.random()  <span class="comment"># 0.2094gja</span></span><br></pre></td></tr></table></figure></li><li><p>uniform(a, b):随机生成[a, b]范围内的浮点数,例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random.uniform(<span class="number">1</span>, <span class="number">10</span>)  <span class="comment"># 3.1415</span></span><br><span class="line">random.uniform(<span class="number">1</span>, <span class="number">10</span>)  <span class="comment"># 8.4421</span></span><br></pre></td></tr></table></figure></li><li><p> randint(a, b):随机生成[a, b]范围内的整数,例如:</p></li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random.randint(<span class="number">1</span>, <span class="number">6</span>)   <span class="comment"># 2  </span></span><br><span class="line">random.randint(<span class="number">1</span>, <span class="number">6</span>)   <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><ol start="4"><li> randrange(start, stop):随机生成[start, stop)范围内的整数,例如:</li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random.randrange(<span class="number">1</span>, <span class="number">11</span>) <span class="comment"># 7  </span></span><br><span class="line">random.randrange(<span class="number">1</span>, <span class="number">11</span>) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><ol start="5"><li> choice(seq):随机选取序列中的一个元素,seq可以是列表、元组或字符串,例如:</li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random.choice([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])   <span class="comment"># 2</span></span><br><span class="line">random.choice(<span class="string">&#x27;abc&#x27;</span>)        <span class="comment"># c</span></span><br></pre></td></tr></table></figure><ol start="6"><li><p>shuffle(seq):随机打乱序列中的元素,返回None,例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">random.shuffle(lst)  </span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># [2, 1, 3]</span></span><br></pre></td></tr></table></figure></li><li><p> sample(seq, k):随机选择k个元素,seq可以是列表、元组或字符串,返回选取的k个元素,例如:</p></li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random.sample([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">2</span>)   <span class="comment"># [3, 1]</span></span><br><span class="line">random.sample(<span class="string">&#x27;abcde&#x27;</span>, <span class="number">3</span>)        <span class="comment"># [&#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;]</span></span><br></pre></td></tr></table></figure><ol start="8"><li> choices(seq, weights, k):按weights权重随机选择k个元素,seq和weights的长度应该相同,例如:</li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random.choices([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], weights=[<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>], k=<span class="number">2</span>)  </span><br><span class="line"><span class="comment"># [1, 1]   # 1的权重更高,所以更容易被选中</span></span><br></pre></td></tr></table></figure><h1 id="一些简单的代码实现"><a href="#一些简单的代码实现" class="headerlink" title="一些简单的代码实现"></a>一些简单的代码实现</h1><h2 id="冒泡排序算法"><a href="#冒泡排序算法" class="headerlink" title="冒泡排序算法"></a>冒泡排序算法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 冒泡排序算法实现</span></span><br><span class="line">nums = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># 遍历数组,用于比较相邻的两个元素</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):  </span><br><span class="line">    <span class="comment"># 遍历数组下标j到数组长度减一</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(nums) - i - <span class="number">1</span>):  </span><br><span class="line">        <span class="comment"># 如果前一个元素大于后一个元素,则交换</span></span><br><span class="line">        <span class="keyword">if</span> nums[j] &gt; nums[j + <span class="number">1</span>]:</span><br><span class="line">            <span class="comment"># 使用临时变量保存nums[j]</span></span><br><span class="line">            temp = nums[j]  </span><br><span class="line">            <span class="comment"># 将nums[j+1]赋值给nums[j]</span></span><br><span class="line">            nums[j] = nums[j + <span class="number">1</span>]  </span><br><span class="line">            <span class="comment"># 将临时变量temp赋值给nums[j+1]</span></span><br><span class="line">            nums[j + <span class="number">1</span>] = temp</span><br><span class="line"><span class="built_in">print</span>(nums)  </span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nums 表示要排序的列表</span></span><br><span class="line"><span class="comment"># 外层for循环用于遍历数组下标i,范围是0到数组长度减一</span></span><br><span class="line"><span class="comment"># 内层for循环用于比较相邻的两个元素,范围是数组下标j到数组长度减一减i</span></span><br><span class="line"><span class="comment"># 如果前一个元素(nums[j])大于后一个元素(nums[j + 1]),则交换这两个元素</span></span><br><span class="line"><span class="comment"># 使用临时变量temp保存nums[j],然后将nums[j+1]赋值给nums[j]</span></span><br><span class="line"><span class="comment"># 最后将临时变量temp赋值给nums[j + 1],完成交换</span></span><br><span class="line"><span class="comment"># 两层for循环可以完成数组的遍历和相邻元素的比较和交换</span></span><br><span class="line"><span class="comment"># 外层循环每次将最大值放到尾部,内层循环比较下一组相邻元素</span></span><br><span class="line"><span class="comment"># 重复上述操作,直到数组有序为止</span></span><br></pre></td></tr></table></figure><h2 id="两人猜随机数小游戏"><a href="#两人猜随机数小游戏" class="headerlink" title="两人猜随机数小游戏"></a>两人猜随机数小游戏</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成一个1到100的数字</span></span><br><span class="line">num = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 玩家1和玩家2的猜测次数 </span></span><br><span class="line">p1_count = <span class="number">0</span> </span><br><span class="line">p2_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 玩家1先猜</span></span><br><span class="line">p1_guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;玩家1猜一个1到100的数字: &#x27;</span>)) </span><br><span class="line">p1_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果猜错,玩家2猜 </span></span><br><span class="line"><span class="keyword">while</span> p1_guess != num: </span><br><span class="line">    <span class="keyword">if</span> p1_guess &gt; num: </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;太大了!&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;太小了!&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    p2_guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;玩家2猜一个1到100的数字: &#x27;</span>))</span><br><span class="line">    p2_count += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> p2_guess != num:</span><br><span class="line">        <span class="keyword">if</span> p2_guess &gt; num:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;太大了!&#x27;</span>) </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;太小了!&#x27;</span>) </span><br><span class="line">            </span><br><span class="line">    <span class="comment"># 交换回玩家1猜        </span></span><br><span class="line">    p1_guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;玩家1再猜一个1到100的数字: &#x27;</span>))  </span><br><span class="line">    p1_count += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 当有人猜中时,游戏结束</span></span><br><span class="line"><span class="keyword">if</span> p1_guess == num: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;玩家1猜中了!总共猜了<span class="subst">&#123;p1_count&#125;</span>次&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;玩家2猜中了!总共猜了<span class="subst">&#123;p2_count&#125;</span>次&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">代码运行过程：</span></span><br><span class="line"><span class="string">玩家1猜一个1到100的数字: 50</span></span><br><span class="line"><span class="string">太小了!</span></span><br><span class="line"><span class="string">玩家2猜一个1到100的数字: 80</span></span><br><span class="line"><span class="string">太大了!</span></span><br><span class="line"><span class="string">玩家1再猜一个1到100的数字: 60</span></span><br><span class="line"><span class="string">玩家1猜中了!总共猜了2次</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 详细说明:</span></span><br><span class="line"><span class="comment"># 首先生成一个随机整数作为需要猜的数字</span></span><br><span class="line"><span class="comment"># 定义两个变量来统计玩家1和玩家2的猜测次数</span></span><br><span class="line"><span class="comment"># 玩家1先输入猜测数字,次数加1</span></span><br><span class="line"><span class="comment"># 如果猜错,则交换到玩家2猜,并给出提示太大或者太小</span></span><br><span class="line"><span class="comment"># 无论谁猜,如果猜错则继续猜,如果猜中则打印猜中信息和总共猜了多少次</span></span><br><span class="line"><span class="comment"># 使用while循环来重复猜测,直到有人猜中为止</span></span><br><span class="line"><span class="comment"># 以上就是两个人猜数字游戏的实现,通过学习可以了解如何利用while循环和if-else逻辑来设计游戏程序。</span></span><br></pre></td></tr></table></figure><h2 id="字典是Python中实现计数功能的一种非常简单的方式。"><a href="#字典是Python中实现计数功能的一种非常简单的方式。" class="headerlink" title="字典是Python中实现计数功能的一种非常简单的方式。"></a>字典是Python中实现计数功能的一种非常简单的方式。</h2><p>假设我们要统计一个字符串中每个单词出现的次数,可以这么做:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;hello world hello world hello&quot;</span></span><br><span class="line"></span><br><span class="line">word_count = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> s.split(): <span class="comment"># 以空格分割字符</span></span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">in</span> word_count:  <span class="comment"># 如果word在字典里面</span></span><br><span class="line">        word_count[word] += <span class="number">1</span>  <span class="comment"># 就让word键的值加一</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        word_count[word] = <span class="number">1</span> <span class="comment"># 如果没在里面，就新建一个键把值赋为1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(word_count) <span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># &#123;&#x27;hello&#x27;: 3, &#x27;world&#x27;: 2&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">解释一下:</span></span><br><span class="line"><span class="string">1. 首先创建一个空字典 word_count</span></span><br><span class="line"><span class="string">2. 然后按空格分隔字符串,得到每个单词</span></span><br><span class="line"><span class="string">3. 检查单词是否在字典中,如果在的话计数加1,如果不在的话置为1</span></span><br><span class="line"><span class="string">4. 最后打印结果,我们得到了每个单词出现的次数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一个例子,统计一个列表中每个元素出现的次数:</span></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">count = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> count:</span><br><span class="line">        count[n] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        count[n] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(count)  <span class="comment"># &#123;1: 1, 2: 3, 3: 1, 4: 1, 6: 1&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典算法</title>
      <link href="/post/52bf2cec.html"/>
      <url>/post/52bf2cec.html</url>
      
        <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>&emsp;&emsp;冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列,一次比较两个元素,如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换,也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢”浮”到数列的顶端。  </p><p>&emsp;&emsp;基本的冒泡排序实现：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">nums</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 我们设置 swapped 为 True 以确保循环在至少发生一次交换时继续运行</span></span><br><span class="line">    swapped = <span class="literal">True</span>  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 我们要遍历数组的全部元素,因此 outer loop 从 0 到 数组的长度 </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):  </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果没有发生任何交换,那么数组已经排序完成,我们可以停止循环</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> swapped:  </span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 我们将 swapped 设置为 False,假定本次循环不会发生交换         </span></span><br><span class="line">        swapped = <span class="literal">False</span>  </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 现在我们以Similar的方式在当前的未排序区间内进行遍历 </span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(nums) - i - <span class="number">1</span>):  </span><br><span class="line">        </span><br><span class="line">            <span class="comment"># 如果前面的元素大于后面的元素,我们交换它们</span></span><br><span class="line">            <span class="keyword">if</span> nums[j] &gt; nums[j + <span class="number">1</span>]:  </span><br><span class="line">                nums[j], nums[j + <span class="number">1</span>] = nums[j + <span class="number">1</span>], nums[j] </span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 我们发生了交换,所以设置 swapped 为 True 以确保我们在下次循环中继续遍历</span></span><br><span class="line">                swapped = <span class="literal">True</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试数组                </span></span><br><span class="line">nums = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>] </span><br><span class="line">bubble_sort(nums) </span><br><span class="line"><span class="built_in">print</span>(nums) <span class="comment"># [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;时间复杂度 O(n^2), 空间复杂度 O(1)。冒泡排序的优点是简单,稳定,空间效率高。缺点是时间效率不高,并不实用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Claude回复</title>
      <link href="/post/24531ddb.html"/>
      <url>/post/24531ddb.html</url>
      
        <content type="html"><![CDATA[<h1 id="Claude回复"><a href="#Claude回复" class="headerlink" title="Claude回复"></a>Claude回复</h1><h2 id="23-4-17"><a href="#23-4-17" class="headerlink" title="23.4.17"></a>23.4.17</h2><p>&emsp;&emsp;这萧瑟的天，浸染着岁月静好的颜色，却也冲淡了我们曾携手拾起的那片金黄。如今我独行在这道道飘零，为了一眼青涩的影子，为了一句朦胧的笑语，唏嘘不已。回首那少年，却只剩零散记忆，与漫天的落叶一起，飘荡于天际。</p><h2 id="23-4-19"><a href="#23-4-19" class="headerlink" title="23.4.19"></a>23.4.19</h2><p>&emsp;&emsp;月华萧疏，风势蕴藉，星河黯淡，天亦有情。孤灯摇黄，江湖去来，金玉艳歌未曾歇。望窗外，情怯似秋千，零落成土。闭门无眠，往事涌现， 故人泪干，绝期再续难。风掠庭树，欲将念捎， 刀山烈火，烹心焦肝处。人来人往，深情到何方。红尘似梦中，眠不待醒，夜夜思君，泪痕销魂处。小巷幽冥，独影徘徊， 情难平兮，生死漫漫。红灯嬉笑处，歌楼起舞， 独上轩阁，望秋夜，想君容颜，泪如雨下矣。  </p><h2 id="23-4-22"><a href="#23-4-22" class="headerlink" title="23.4.22"></a>23.4.22</h2><p>&emsp;&emsp;白驹过隙，转眼年轮滚动，物是人非，万变不离其宗。珍惜人世间每一段相逢，在哲理的车站前，与过往的列车间，同享人生的悲欢喜乐。在相遇与分别中，度此年华。车站说得不错，来者不拒，去者不留，但她长在，理想永存。</p><p>&emsp;&emsp;人生如此，活着就是一段旅程，在变与不变之间，在相遇与分离之中，皆为旅人。驶入生命车站，停靠片刻，各奔天涯。唯生命的车站不变，古道阡陌，几许风华正茂，时来时往。然不曾改变的是，这里常有人，他们在这里相见，在这里相知，在这里结识，然后各自远行，直至天涯。  </p><h2 id="23-4-25"><a href="#23-4-25" class="headerlink" title="23.4.25"></a>23.4.25</h2><p>&emsp;&emsp;“会有那么一天，你也会放下今天的执着和不舍，带着稍许的遗憾，是认清，是放过，是释怀，是无能为力”  </p><p>&emsp;&emsp;“这短短的一生，我们最将会失去，你不妨大胆一些，爱一个人，追一个梦，攀一座山”</p><h2 id="23-5-5"><a href="#23-5-5" class="headerlink" title="23.5.5"></a>23.5.5</h2><p>&emsp;&emsp;”欲望带来的快乐会随着得到不断弱化，身体的快乐适应机制会不断加码，所以物质是不可能真正让人快乐，永恒的幸福快乐来自于内心的平静与喜悦”</p><p>&emsp;&emsp;“人最怕的就是，信任过后的欺骗，付出过后的心寒，亲密过后的疏远，深情过后的敷衍，相知过后的分离，珍惜过后的失去。。。”</p><h2 id="23-5-9"><a href="#23-5-9" class="headerlink" title="23.5.9"></a>23.5.9</h2><p>&emsp;&emsp;”天下熙熙，皆为利来，天下攘攘，皆为利往”</p>]]></content>
      
      
      
        <tags>
            
            <tag> 语文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python库</title>
      <link href="/post/fa288682.html"/>
      <url>/post/fa288682.html</url>
      
        <content type="html"><![CDATA[<h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&emsp;&emsp;NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p><p>&emsp;&emsp;NumPy 的前身 Numeric 最早是由 Jim Hugunin 与其它协作者共同开发，2005 年，Travis Oliphant 在 Numeric 中结合了另一个同性质的程序库 Numarray 的特色，并加入了其它扩展而开发了 NumPy。NumPy 为开放源代码并且由许多协作者共同维护开发。</p><p>&emsp;&emsp;NumPy 是一个运行速度非常快的数学库，主要用于数组计算，包含：</p><ul><li>一个强大的N维数组对象 ndarray</li><li>广播功能函数</li><li>整合 C/C++/Fortran 代码的工具</li><li>线性代数、傅里叶变换、随机数生成等功能</li></ul><p>&emsp;&emsp;<strong>NumPy</strong> 通常与 <strong>SciPy</strong>（Scientific Python）和 <strong>Matplotlib</strong>（绘图库）一起使用， 这种组合广泛用于替代 MatLab，是一个强大的科学计算环境，有助于我们通过 Python 学习数据科学或者机器学习。</p><p>&emsp;&emsp;SciPy 是一个开源的 Python 算法库和数学工具包。SciPy 包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。</p><p>&emsp;&emsp;Matplotlib 是 Python 编程语言及其数值数学扩展包 NumPy 的可视化操作界面。它为利用通用的图形用户界面工具包，如 Tkinter, wxPython, Qt 或 GTK+ 向应用程序嵌入式绘图提供了应用程序接口（API）。</p><h2 id="Ndarray-对象"><a href="#Ndarray-对象" class="headerlink" title="Ndarray 对象"></a>Ndarray 对象</h2><p>&emsp;&emsp;NumPy 最重要的一个特点是其 N 维数组对象 ndarray，它是一系列同类型数据的集合，以 0 下标为开始进行集合中元素的索引。</p><p>&emsp;&emsp;ndarray 对象是用于存放同类型元素的多维数组。ndarray 中的每个元素在内存中都有相同存储大小的区域。</p><p>ndarray 内部由以下内容组成：</p><ul><li>一个指向数据（内存或内存映射文件中的一块数据）的指针。</li><li>数据类型或 dtype，描述在数组中的固定大小值的格子。</li><li>一个表示数组形状（shape）的元组，表示各维度大小的元组。</li><li>一个跨度元组（stride），其中的整数指的是为了前进到当前维度下一个元素需要”跨过”的字节数。</li></ul><p>ndarray 的内部结构:  </p><p><img src="fa288682/ndarray.png" alt="ndarray"></p><p>跨度可以是负数，这样会使数组在内存中后向移动，切片中 <strong>obj[::-1]</strong> 或 <strong>obj[:,::-1]</strong> 就是如此。</p><p>创建一个 ndarray 只需调用 NumPy 的 array 函数即可：  </p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.array(<span class="built_in">object</span>, dtype = <span class="literal">None</span>, copy = <span class="literal">True</span>, order = <span class="literal">None</span>, subok = <span class="literal">False</span>, ndmin = <span class="number">0</span>)</span><br></pre></td></tr></table></figure></blockquote><p><strong>参数说明：</strong>  </p><table><thead><tr><th align="left">名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">object</td><td align="left">数组或嵌套的数列</td></tr><tr><td align="left">dtype</td><td align="left">数组元素的数据类型，可选</td></tr><tr><td align="left">copy</td><td align="left">对象是否需要复制，可选</td></tr><tr><td align="left">order</td><td align="left">创建数组的样式，C为行方向，F为列方向，A为任意方向（默认）</td></tr><tr><td align="left">subok</td><td align="left">默认返回一个与基类类型一致的数组</td></tr><tr><td align="left">ndmin</td><td align="left">指定生成数组的最小维度</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例 1</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])  </span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="comment">#  [1 2 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实列2</span></span><br><span class="line"><span class="comment"># 多于一个维度  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">a = np.array([[<span class="number">1</span>,  <span class="number">2</span>],  [<span class="number">3</span>,  <span class="number">4</span>]])  </span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1  2] </span></span><br><span class="line"><span class="string"> [3  4]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实列3</span></span><br><span class="line"><span class="comment"># 最小维度  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], ndmin =  <span class="number">2</span>)  </span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;[[1 2 3 4 5]]&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例 4</span></span><br><span class="line"><span class="comment"># dtype 参数  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">a = np.array([<span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>], dtype = <span class="built_in">complex</span>)  </span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;[1.+0.j 2.+0.j 3.+0.j]&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="数据类型对象-dtype"><a href="#数据类型对象-dtype" class="headerlink" title="数据类型对象 (dtype)"></a>数据类型对象 (dtype)</h2><p>&emsp;&emsp;在**numpy.array(object, dtype = None,…)<strong>代码中，dtype实际上为</strong>numpy.dtype(object, align, copy)**对象，所需要参数：</p><ul><li>object - 要转换为的数据类型对象</li><li>align - 如果为 true，填充字段使其类似 C 的结构体。</li><li>copy - 复制 dtype 对象 ，如果为 false，则是对内置数据类型对象的引用</li></ul><p>&emsp;&emsp;传入的object参数可以为np.int或者.其他数据类型，亦或者’i4’等数据类型的缩写。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例1</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 使用标量类型</span></span><br><span class="line">dt = np.dtype(np.int32)</span><br><span class="line"><span class="built_in">print</span>(dt, <span class="built_in">type</span>(dt))</span><br><span class="line"><span class="comment"># int32  &lt;class &#x27;numpy.dtype[int32]&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例2</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># int8, int16, int32, int64 四种数据类型可以使用字符串 &#x27;i1&#x27;, &#x27;i2&#x27;,&#x27;i4&#x27;,&#x27;i8&#x27; 代替</span></span><br><span class="line">dt = np.dtype(<span class="string">&#x27;i4&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dt)</span><br><span class="line">int32</span><br></pre></td></tr></table></figure><p>结构化数据类型略。</p><h2 id="NumPy-数组属性"><a href="#NumPy-数组属性" class="headerlink" title="NumPy 数组属性"></a>NumPy 数组属性</h2><p>&emsp;&emsp;NumPy 的数组中比较重要 ndarray 对象属性有：  </p><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">ndarray.ndim</td><td align="left">秩，即轴的数量或维度的数量</td></tr><tr><td align="left">ndarray.shape</td><td align="left">数组的维度，对于矩阵，n 行 m 列</td></tr><tr><td align="left">ndarray.size</td><td align="left">数组元素的总个数，相当于 .shape 中 n*m 的值</td></tr><tr><td align="left">ndarray.dtype</td><td align="left">ndarray 对象的元素类型</td></tr><tr><td align="left">ndarray.itemsize</td><td align="left">ndarray 对象中每个元素的大小，以字节为单位</td></tr><tr><td align="left">ndarray.flags</td><td align="left">ndarray 对象的内存信息</td></tr><tr><td align="left">ndarray.real</td><td align="left">ndarray元素的实部</td></tr><tr><td align="left">ndarray.imag</td><td align="left">ndarray 元素的虚部</td></tr><tr><td align="left">ndarray.data</td><td align="left">包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性。</td></tr></tbody></table><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调整数组大小。</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]) </span><br><span class="line">a.shape =  (<span class="number">3</span>,<span class="number">2</span>)  </span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出结果为：</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [3 4]</span></span><br><span class="line"><span class="string"> [5 6]]&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NumPy 也提供了 reshape 函数来调整数组大小。</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]) </span><br><span class="line">b = a.reshape(<span class="number">3</span>,<span class="number">2</span>)  </span><br><span class="line"><span class="built_in">print</span> (b)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出结果为：</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [3 4]</span></span><br><span class="line"><span class="string"> [5 6]]&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意reshape操作结果并不是新建数组，结果元素数值改变reshape之前的结果也会改变。</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">b = a.reshape((<span class="number">6</span>,))</span><br><span class="line"><span class="built_in">print</span>(a) <span class="string">&#x27;&#x27;&#x27;array([[1, 2, 3],</span></span><br><span class="line"><span class="string">           [4, 5, 6]])&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b) <span class="string">&#x27;&#x27;&#x27;array([1, 2, 3, 4, 5, 6])&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>]=<span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="string">&#x27;&#x27;&#x27;array([100,   2,   3,   4,   5,   6])&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a) <span class="string">&#x27;&#x27;&#x27;array([[100,   2,   3],</span></span><br><span class="line"><span class="string">          [  4,   5,   6]])&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="NumPy-创建数组"><a href="#NumPy-创建数组" class="headerlink" title="NumPy 创建数组"></a>NumPy 创建数组</h2><h3 id="numpy-empty"><a href="#numpy-empty" class="headerlink" title="numpy.empty"></a>numpy.empty</h3><p>numpy.empty 方法用来创建一个指定形状（shape）、数据类型（dtype）且未初始化的数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.empty(shape, dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">shape</td><td align="left">数组形状</td></tr><tr><td align="left">dtype</td><td align="left">数据类型，可选</td></tr><tr><td align="left">order</td><td align="left">有”C”和”F”两个选项,分别代表，行优先和列优先，在计算机内存中的存储元素的顺序。</td></tr></tbody></table><p><strong>注意</strong> − 数组元素为随机值，因为它们未初始化。  </p><h3 id="numpy-zeros"><a href="#numpy-zeros" class="headerlink" title="numpy.zeros"></a>numpy.zeros</h3><p>创建指定大小的数组，数组元素以 0 来填充：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.zeros(shape, dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">shape</td><td align="left">数组形状</td></tr><tr><td align="left">dtype</td><td align="left">数据类型，可选</td></tr><tr><td align="left">order</td><td align="left">‘C’ 用于 C 的行数组，或者 ‘F’ 用于 FORTRAN 的列数组</td></tr></tbody></table><h3 id="numpy-ones"><a href="#numpy-ones" class="headerlink" title="numpy.ones"></a>numpy.ones</h3><p>创建指定形状的数组，数组元素以 1 来填充：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.ones(shape, dtype = <span class="literal">None</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">shape</td><td align="left">数组形状</td></tr><tr><td align="left">dtype</td><td align="left">数据类型，可选</td></tr><tr><td align="left">order</td><td align="left">‘C’ 用于 C 的行数组，或者 ‘F’ 用于 FORTRAN 的列数组</td></tr></tbody></table><h3 id="numpy-zeros-like"><a href="#numpy-zeros-like" class="headerlink" title="numpy.zeros_like"></a>numpy.zeros_like</h3><p>numpy.zeros_like 用于创建一个与给定数组具有相同形状的数组，数组元素以 0 来填充。</p><p>numpy.zeros 和 numpy.zeros_like 都是用于创建一个指定形状的数组，其中所有元素都是 0。</p><p>它们之间的区别在于：numpy.zeros 可以直接指定要创建的数组的形状，而 numpy.zeros_like 则是创建一个与给定数组具有相同形状的数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.zeros_like(a, dtype=<span class="literal">None</span>, order=<span class="string">&#x27;K&#x27;</span>, subok=<span class="literal">True</span>, shape=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">a</td><td align="left">给定要创建相同形状的数组</td></tr><tr><td align="left">dtype</td><td align="left">创建的数组的数据类型</td></tr><tr><td align="left">order</td><td align="left">数组在内存中的存储顺序，可选值为 ‘C’（按行优先）或 ‘F’（按列优先），默认为 ‘K’（保留输入数组的存储顺序）</td></tr><tr><td align="left">subok</td><td align="left">是否允许返回子类，如果为 True，则返回一个子类对象，否则返回一个与 a 数组具有相同数据类型和存储顺序的数组</td></tr><tr><td align="left">shape</td><td align="left">创建的数组的形状，如果不指定，则默认为 a 数组的形状。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个与 arr 形状相同的，所有元素都为 0 的数组：</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建一个 3x3 的二维数组</span></span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建一个与 arr 形状相同的，所有元素都为 0 的数组</span></span><br><span class="line">zeros_arr = np.zeros_like(arr)</span><br><span class="line"><span class="built_in">print</span>(z</span><br><span class="line">eros_arr)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出结果为：</span></span><br><span class="line"><span class="string">[[0 0 0]</span></span><br><span class="line"><span class="string"> [0 0 0]</span></span><br><span class="line"><span class="string"> [0 0 0]]&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="numpy-ones-like"><a href="#numpy-ones-like" class="headerlink" title="numpy.ones_like"></a>numpy.ones_like</h3><p><a href="#numpy.zeros_like">参照numpy.zeros_like</a>  </p><h2 id="从已有的数组创建数组"><a href="#从已有的数组创建数组" class="headerlink" title="从已有的数组创建数组"></a>从已有的数组创建数组</h2><h3 id="numpy-asarray"><a href="#numpy-asarray" class="headerlink" title="numpy.asarray"></a>numpy.asarray</h3><p>numpy.asarray 类似 numpy.array，但 numpy.asarray 参数只有三个，比 numpy.array 少两个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.asarray(a, dtype = <span class="literal">None</span>, order = <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">a</td><td align="left">任意形式的输入参数，可以是，列表, 列表的元组, 元组, 元组的元组, 元组的列表，多维数组</td></tr><tr><td align="left">dtype</td><td align="left">数据类型，可选</td></tr><tr><td align="left">order</td><td align="left">可选，有”C”和”F”两个选项,分别代表，行优先和列优先，在计算机内存中的存储元素的顺序。</td></tr></tbody></table><h3 id="numpy-fromiter"><a href="#numpy-fromiter" class="headerlink" title="numpy.fromiter"></a>numpy.fromiter</h3><p>numpy.fromiter 方法从可迭代对象中建立 ndarray 对象，返回一维数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.fromiter(iterable, dtype, count=-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">iterable</td><td align="left">可迭代对象</td></tr><tr><td align="left">dtype</td><td align="left">返回数组的数据类型</td></tr><tr><td align="left">count</td><td align="left">读取的数据数量，默认为-1，读取所有数据</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用 range 函数创建列表对象  </span></span><br><span class="line"><span class="built_in">list</span>=<span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line">it=<span class="built_in">iter</span>(<span class="built_in">list</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用迭代器创建 ndarray </span></span><br><span class="line">x=np.fromiter(it, dtype=<span class="built_in">float</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出结果为：</span></span><br><span class="line"><span class="string">[0. 1. 2. 3. 4.]&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="NumPy-从数值范围创建数组"><a href="#NumPy-从数值范围创建数组" class="headerlink" title="NumPy 从数值范围创建数组"></a>NumPy 从数值范围创建数组</h2><h3 id="numpy-arange"><a href="#numpy-arange" class="headerlink" title="numpy.arange"></a>numpy.arange</h3><p>numpy 包中的使用 arange 函数创建数值范围并返回 ndarray 对象，函数格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.arange(start, stop, step, dtype)</span><br></pre></td></tr></table></figure><p>根据 start 与 stop (前闭后开)指定的范围以及 step 设定的步长，生成一个 ndarray。</p><p>参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>start</code></td><td align="left">起始值，默认为<code>0</code></td></tr><tr><td align="left"><code>stop</code></td><td align="left">终止值（不包含）</td></tr><tr><td align="left"><code>step</code></td><td align="left">步长，默认为<code>1</code></td></tr><tr><td align="left"><code>dtype</code></td><td align="left">返回<code>ndarray</code>的数据类型，如果没有提供，则会使用输入数据的类型。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成 0 到 4 长度为 5 的数组:</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">x = np.arange(<span class="number">5</span>)  </span><br><span class="line"><span class="built_in">print</span> (x)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出结果如下：</span></span><br><span class="line"><span class="string">[0  1  2  3  4]&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="numpy-linspace"><a href="#numpy-linspace" class="headerlink" title="numpy.linspace"></a>numpy.linspace</h3><p>numpy.linspace 函数用于创建一个一维数组，数组是一个等差数列构成的，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linspace(start, stop, num=<span class="number">50</span>, endpoint=<span class="literal">True</span>, retstep=<span class="literal">False</span>, dtype=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>start</code></td><td align="left">序列的起始值</td></tr><tr><td align="left"><code>stop</code></td><td align="left">序列的终止值，如果<code>endpoint</code>为<code>true</code>，该值包含于数列中</td></tr><tr><td align="left"><code>num</code></td><td align="left">要生成的等步长的样本数量，默认为<code>50</code></td></tr><tr><td align="left"><code>endpoint</code></td><td align="left">该值为 <code>true</code> 时，数列中包含<code>stop</code>值，反之不包含，默认是True。</td></tr><tr><td align="left"><code>retstep</code></td><td align="left">如果为 True 时，生成的数组中会显示间距，反之不显示。</td></tr><tr><td align="left"><code>dtype</code></td><td align="left"><code>ndarray</code> 的数据类型</td></tr></tbody></table><h3 id="numpy-logspace"><a href="#numpy-logspace" class="headerlink" title="numpy.logspace"></a>numpy.logspace</h3><p>numpy.logspace 函数用于创建一个于等比数列。格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.logspace(start, stop, num=<span class="number">50</span>, endpoint=<span class="literal">True</span>, base=<span class="number">10.0</span>, dtype=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>base 参数意思是取对数的时候 log 的下标。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>start</code></td><td align="left">序列的起始值为：base ** start</td></tr><tr><td align="left"><code>stop</code></td><td align="left">序列的终止值为：base ** stop。如果<code>endpoint</code>为<code>true</code>，该值包含于数列中</td></tr><tr><td align="left"><code>num</code></td><td align="left">要生成的等步长的样本数量，默认为<code>50</code></td></tr><tr><td align="left"><code>endpoint</code></td><td align="left">该值为 <code>true</code> 时，数列中中包含<code>stop</code>值，反之不包含，默认是True。</td></tr><tr><td align="left"><code>base</code></td><td align="left">对数 log 的底数。</td></tr><tr><td align="left"><code>dtype</code></td><td align="left"><code>ndarray</code> 的数据类型</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 默认底数是 10</span></span><br><span class="line">a = np.logspace(<span class="number">1.0</span>,  <span class="number">2.0</span>, num =  <span class="number">10</span>)  </span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出结果为：</span></span><br><span class="line"><span class="string">[ 10.           12.91549665     16.68100537      21.5443469  27.82559402      </span></span><br><span class="line"><span class="string">  35.93813664   46.41588834     59.94842503      77.42636827    100.    ]&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将对数的底数设置为 2 :</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.logspace(<span class="number">0</span>,<span class="number">9</span>,<span class="number">10</span>,base=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出如下：</span></span><br><span class="line"><span class="string">[  1.   2.   4.   8.  16.  32.  64. 128. 256. 512.]&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="NumPy-切片和索引"><a href="#NumPy-切片和索引" class="headerlink" title="NumPy 切片和索引"></a>NumPy 切片和索引</h2><p>ndarray对象的内容可以通过索引或切片来访问和修改，与 Python 中 list 的切片操作一样。</p><p>ndarray 数组可以基于 0 - n 的下标进行索引，切片对象可以通过内置的 slice 函数，并设置 start, stop 及 step 参数进行，从原数组中切割出一个新数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">s = <span class="built_in">slice</span>(<span class="number">2</span>,<span class="number">7</span>,<span class="number">2</span>)   <span class="comment"># 从索引 2 开始到索引 7 停止，间隔为2</span></span><br><span class="line"><span class="built_in">print</span> (a[s])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出结果为：</span></span><br><span class="line"><span class="string">[2  4  6]&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>以上实例中，我们首先通过 arange() 函数创建 ndarray 对象。 然后，分别设置起始，终止和步长的参数为 2，7 和 2。</p><p>我们也可以通过冒号分隔切片参数 <strong>start:stop:step</strong> 来进行切片操作：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.arange(<span class="number">10</span>)  </span><br><span class="line">b = a[<span class="number">2</span>:<span class="number">7</span>:<span class="number">2</span>]   <span class="comment"># 从索引 2 开始到索引 7 停止，间隔为 2</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出结果为：</span></span><br><span class="line"><span class="string">[2  4  6]&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>冒号 <strong>:</strong> 的解释：如果只放置一个参数，如 **[2]**，将返回与该索引相对应的单个元素。如果为 **[2:]**，表示从该索引开始以后的所有项都将被提取。如果使用了两个参数，如 **[2:7]**，那么则提取两个索引(<strong>不包括停止索引</strong>)之间的项。如果只有:则选取全部值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">10</span>)  <span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line">b = a[<span class="number">5</span>] </span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出结果为：5&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>:])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出结果为：[2  3  4  5  6  7  8  9]&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">10</span>)  <span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出结果为：[2  3  4]&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">10</span>)  <span class="comment"># [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"><span class="built_in">print</span>(a[:])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出结果为：[0 1 2 3 4 5 6 7 8 9]&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>多维数组同样适用上述索引提取方法。切片还可以包括省略号 <strong>…</strong>，返回所有值。类似:。 <strong>::-1是取反的意思。</strong>  </p><h2 id="NumPy-高级索引"><a href="#NumPy-高级索引" class="headerlink" title="NumPy 高级索引"></a>NumPy 高级索引</h2><h3 id="整数数组索引"><a href="#整数数组索引" class="headerlink" title="整数数组索引"></a>整数数组索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">x = np.array([[<span class="number">1</span>,  <span class="number">2</span>],  [<span class="number">3</span>,  <span class="number">4</span>],  [<span class="number">5</span>,  <span class="number">6</span>]]) </span><br><span class="line">y = x[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],  [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]]  </span><br><span class="line"><span class="built_in">print</span> (y)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出结果为：</span></span><br><span class="line"><span class="string">[1  4  5]&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">x = np.array([[  <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],[  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>],[  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>],[  <span class="number">9</span>,  <span class="number">10</span>,  <span class="number">11</span>]])  </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;我们的数组是：&#x27;</span> )</span><br><span class="line"><span class="built_in">print</span> (x)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">rows = np.array([[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">3</span>]]) </span><br><span class="line">cols = np.array([[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">2</span>]]) </span><br><span class="line">y = x[rows,cols]  </span><br><span class="line"><span class="built_in">print</span>  (<span class="string">&#x27;这个数组的四个角元素是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (y)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;            其实就是rows中的元素依次对应cols中的元素组成坐标，得到的结果跟rows和cols的shape一样</span></span><br><span class="line"><span class="string">输出结果为：</span></span><br><span class="line"><span class="string">我们的数组是：</span></span><br><span class="line"><span class="string">[[ 0  1  2]</span></span><br><span class="line"><span class="string"> [ 3  4  5]</span></span><br><span class="line"><span class="string"> [ 6  7  8]</span></span><br><span class="line"><span class="string"> [ 9 10 11]]</span></span><br><span class="line"><span class="string">这个数组的四个角元素是：</span></span><br><span class="line"><span class="string">[[ 0  2]</span></span><br><span class="line"><span class="string"> [ 9 11]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以借助切片 : 或 … 与索引数组组合。如下面例子：</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line">b = a[<span class="number">1</span>:<span class="number">3</span>, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">c = a[<span class="number">1</span>:<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">d = a[...,<span class="number">1</span>:]</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出结果为：</span></span><br><span class="line"><span class="string">[[5 6]</span></span><br><span class="line"><span class="string"> [8 9]]</span></span><br><span class="line"><span class="string">[[5 6]</span></span><br><span class="line"><span class="string"> [8 9]]</span></span><br><span class="line"><span class="string">[[2 3]</span></span><br><span class="line"><span class="string"> [5 6]</span></span><br><span class="line"><span class="string"> [8 9]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="布尔索引"><a href="#布尔索引" class="headerlink" title="布尔索引"></a>布尔索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">x = np.array([[  <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],[  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>],[  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>],[  <span class="number">9</span>,  <span class="number">10</span>,  <span class="number">11</span>]])  </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;我们的数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (x)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># 现在我们会打印出大于 5 的元素  </span></span><br><span class="line"><span class="built_in">print</span>  (<span class="string">&#x27;大于 5 的元素是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (x[x &gt;  <span class="number">5</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出结果为：</span></span><br><span class="line"><span class="string">我们的数组是：</span></span><br><span class="line"><span class="string">[[ 0  1  2]</span></span><br><span class="line"><span class="string"> [ 3  4  5]</span></span><br><span class="line"><span class="string"> [ 6  7  8]</span></span><br><span class="line"><span class="string"> [ 9 10 11]]</span></span><br><span class="line"><span class="string">大于 5 的元素是：</span></span><br><span class="line"><span class="string">[ 6  7  8  9 10 11]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="NumPy-广播-Broadcast"><a href="#NumPy-广播-Broadcast" class="headerlink" title="NumPy 广播(Broadcast)"></a>NumPy 广播(Broadcast)</h2><p>广播(Broadcast)是 numpy 对不同形状(shape)的数组进行数值计算的方式， 对数组的算术运算通常在相应的元素上进行。</p><p>如果两个数组 a 和 b 形状相同，即满足 <strong>a.shape == b.shape</strong>，那么 a*b 的结果就是 a 与 b 数组对应位相乘。这要求维数相同，且各维度的长度相同。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]) </span><br><span class="line">b = np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>]) </span><br><span class="line">c = a * b </span><br><span class="line"><span class="built_in">print</span> (c)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出结果为：</span></span><br><span class="line"><span class="string">[ 10  40  90 160]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>当运算中的 2 个数组的形状不同时，numpy 将自动触发广播机制。如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">a = np.array([[ <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">           [<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>],</span><br><span class="line">           [<span class="number">20</span>,<span class="number">20</span>,<span class="number">20</span>],</span><br><span class="line">           [<span class="number">30</span>,<span class="number">30</span>,<span class="number">30</span>]])</span><br><span class="line">b = np.array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(a + b)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出结果为：</span></span><br><span class="line"><span class="string">[[ 0  1  2]</span></span><br><span class="line"><span class="string"> [10 11 12]</span></span><br><span class="line"><span class="string"> [20 21 22]</span></span><br><span class="line"><span class="string"> [30 31 32]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>下面的图片展示了数组 b 如何通过广播来与数组 a 兼容:</p><p><img src="fa288682/numpy_broadcast.jpg" alt="broadcast"></p><p>4x3 的二维数组与长为 3 的一维数组相加，等效于把数组 b 在二维上重复 4 次再运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">a = np.array([[ <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">           [<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>],</span><br><span class="line">           [<span class="number">20</span>,<span class="number">20</span>,<span class="number">20</span>],</span><br><span class="line">           [<span class="number">30</span>,<span class="number">30</span>,<span class="number">30</span>]])</span><br><span class="line">b = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">bb = np.tile(b, (<span class="number">4</span>, <span class="number">1</span>))  <span class="comment"># 重复 b 的各个维度 tile第二个参数是将对应维度复制的倍数(4, 1)就是将行复制4次，列复制1次=不变。</span></span><br><span class="line"><span class="built_in">print</span>(a + bb)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出结果为：</span></span><br><span class="line"><span class="string">[[ 1  2  3]</span></span><br><span class="line"><span class="string"> [11 12 13]</span></span><br><span class="line"><span class="string"> [21 22 23]</span></span><br><span class="line"><span class="string"> [31 32 33]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>广播的规则:</strong></p><ul><li>让所有输入数组都向其中形状最长的数组看齐，形状中不足的部分都通过在前面加 1 补齐。</li><li>输出数组的形状是输入数组形状的各个维度上的最大值。</li><li>如果输入数组的某个维度和输出数组的对应维度的长度相同或者其长度为 1 时，这个数组能够用来计算，否则出错。</li><li>当输入数组的某个维度的长度为 1 时，沿着此维度运算时都用此维度上的第一组值。</li></ul><p><strong>简单理解：</strong>对两个数组，分别比较他们的每一个维度（若其中一个数组没有当前维度则忽略），满足：</p><ul><li>数组拥有相同形状。</li><li>当前维度的值相等。</li><li>当前维度的值有一个是 1。</li></ul><p>若条件不满足，抛出 <strong>“ValueError: frames are not aligned”</strong> 异常。</p><h2 id="NumPy-迭代数组"><a href="#NumPy-迭代数组" class="headerlink" title="NumPy 迭代数组"></a>NumPy 迭代数组</h2><p>NumPy 迭代器对象 numpy.nditer 提供了一种灵活访问一个或者多个数组元素的方式。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;原始数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;迭代输出元素：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(a):</span><br><span class="line">    <span class="built_in">print</span> (x, end=<span class="string">&quot;, &quot;</span> )</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出结果为：</span></span><br><span class="line"><span class="string">原始数组是：</span></span><br><span class="line"><span class="string">[[0 1 2]</span></span><br><span class="line"><span class="string"> [3 4 5]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">迭代输出元素：</span></span><br><span class="line"><span class="string">0, 1, 2, 3, 4, 5, </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>以上实例不是使用标准 C 或者 Fortran 顺序，选择的顺序是和数组内存布局一致的，这样做是为了提升访问的效率，默认是行序优先（row-major order，或者说是 C-order）。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(a.T):</span><br><span class="line">    <span class="built_in">print</span> (x, end=<span class="string">&quot;, &quot;</span> )</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(a.T.copy(order=<span class="string">&#x27;C&#x27;</span>)):</span><br><span class="line">    <span class="built_in">print</span> (x, end=<span class="string">&quot;, &quot;</span> )</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出结果为：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0, 1, 2, 3, 4, 5, </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0, 3, 1, 4, 2, 5, </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>从上述例子可以看出，a 和 a.T 的遍历顺序是一样的，也就是他们在内存中的存储顺序也是一样的，但是 <strong>a.T.copy(order = ‘C’)</strong> 的遍历结果是不同的，那是因为它和前两种的存储方式是不一样的，默认是按行访问。 </p><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="控制遍历顺序"><a href="#控制遍历顺序" class="headerlink" title="控制遍历顺序"></a>控制遍历顺序</h3><ul><li><code>for x in np.nditer(a, order=&#39;F&#39;):</code>Fortran order，即是列序优先；</li><li><code>for x in np.nditer(a.T, order=&#39;C&#39;):</code>C order，即是行序优先；  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> </span><br><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">60</span>,<span class="number">5</span>) </span><br><span class="line">a = a.reshape(<span class="number">3</span>,<span class="number">4</span>)  </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;原始数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;以 C 风格顺序排序：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(a, order =  <span class="string">&#x27;C&#x27;</span>):  </span><br><span class="line">    <span class="built_in">print</span> (x, end=<span class="string">&quot;, &quot;</span> )</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;以 F 风格顺序排序：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(a, order =  <span class="string">&#x27;F&#x27;</span>):  </span><br><span class="line">    <span class="built_in">print</span> (x, end=<span class="string">&quot;, &quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">原始数组是：</span></span><br><span class="line"><span class="string">[[ 0  5 10 15]</span></span><br><span class="line"><span class="string"> [20 25 30 35]</span></span><br><span class="line"><span class="string"> [40 45 50 55]]</span></span><br><span class="line"><span class="string">以 C 风格顺序排序：</span></span><br><span class="line"><span class="string">0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, </span></span><br><span class="line"><span class="string">以 F 风格顺序排序：</span></span><br><span class="line"><span class="string">0, 20, 40, 5, 25, 45, 10, 30, 50, 15, 35, 55,</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="修改数组中元素的值"><a href="#修改数组中元素的值" class="headerlink" title="修改数组中元素的值"></a>修改数组中元素的值</h3><p>nditer 对象有另一个可选参数 op_flags。 默认情况下，nditer 将视待迭代遍历的数组为只读对象（read-only），为了在遍历数组的同时，实现对数组元素值得修改，必须指定 readwrite 或者 writeonly 的模式。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">60</span>,<span class="number">5</span>) </span><br><span class="line">a = a.reshape(<span class="number">3</span>,<span class="number">4</span>)  </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;原始数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(a, op_flags=[<span class="string">&#x27;readwrite&#x27;</span>]): </span><br><span class="line">    x[...]=<span class="number">2</span>*x </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;修改后的数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">原始数组是：</span></span><br><span class="line"><span class="string">[[ 0  5 10 15]</span></span><br><span class="line"><span class="string"> [20 25 30 35]</span></span><br><span class="line"><span class="string"> [40 45 50 55]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">修改后的数组是：</span></span><br><span class="line"><span class="string">[[  0  10  20  30]</span></span><br><span class="line"><span class="string"> [ 40  50  60  70]</span></span><br><span class="line"><span class="string"> [ 80  90 100 110]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>如果两个数组是可广播的，nditer 组合对象能够同时迭代它们。 假设数组 a 的维度为 3X4，数组 b 的维度为 1X4 ，则使用以下迭代器（数组 b 被广播到 a 的大小）。</strong>  </p><h2 id="Numpy-数组操作"><a href="#Numpy-数组操作" class="headerlink" title="Numpy 数组操作"></a>Numpy 数组操作</h2><p>Numpy 中包含了一些函数用于处理数组，大概可分为以下几类：</p><ul><li><a href="#%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E5%BD%A2%E7%8A%B6">修改数组形状</a></li><li><a href="#%E7%BF%BB%E8%BD%AC%E6%95%B0%E7%BB%84">翻转数组</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E7%BB%B4%E5%BA%A6">修改数组维度</a></li><li><a href="#%E8%BF%9E%E6%8E%A5%E6%95%B0%E7%BB%84">连接数组</a></li><li><a href="#%E5%88%86%E5%89%B2%E6%95%B0%E7%BB%84">分割数组</a></li><li><a href="#%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9A%84%E6%B7%BB%E5%8A%A0%E4%B8%8E%E5%88%A0%E9%99%A4">数组元素的添加与删除</a>  </li></ul><h3 id="修改数组形状"><a href="#修改数组形状" class="headerlink" title="修改数组形状"></a>修改数组形状</h3><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>reshape</code></td><td align="left">不改变数据的条件下修改形状</td></tr><tr><td align="left"><code>flat</code></td><td align="left">数组元素迭代器</td></tr><tr><td align="left"><code>flatten</code></td><td align="left">返回一份数组拷贝，对拷贝所做的修改不会影响原始数组</td></tr><tr><td align="left"><code>ravel</code></td><td align="left">返回展开数组</td></tr></tbody></table><h4 id="numpy-reshape"><a href="#numpy-reshape" class="headerlink" title="numpy.reshape"></a>numpy.reshape</h4><p>numpy.reshape 函数可以在不改变数据的条件下修改形状，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.reshape(arr, newshape, order=&#x27;C&#x27;)</span><br></pre></td></tr></table></figure><ul><li><code>arr</code>：要修改形状的数组</li><li><code>newshape</code>：整数或者整数数组，新的形状应当兼容原有形状</li><li><code>order</code>：’C’ – 按行，’F’ – 按列，’A’ – 原顺序，’k’ – 元素在内存中的出现顺序。  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.arange(<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;原始数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">b = a.reshape(<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;修改后的数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (b)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">原始数组：</span></span><br><span class="line"><span class="string">[0 1 2 3 4 5 6 7]</span></span><br><span class="line"><span class="string">修改后的数组：</span></span><br><span class="line"><span class="string">[[0 1]</span></span><br><span class="line"><span class="string"> [2 3]</span></span><br><span class="line"><span class="string"> [4 5]</span></span><br><span class="line"><span class="string"> [6 7]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="numpy-ndarray-flat"><a href="#numpy-ndarray-flat" class="headerlink" title="numpy.ndarray.flat"></a>numpy.ndarray.flat</h4><p>numpy.ndarray.flat 是一个数组元素迭代器，实例如下:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>) </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;原始数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span> (row)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#对数组中每个元素都进行处理，可以使用flat属性，该属性是一个数组元素迭代器：</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;迭代后的数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> a.flat:</span><br><span class="line">    <span class="built_in">print</span> (element)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">原始数组：</span></span><br><span class="line"><span class="string">[0 1 2]</span></span><br><span class="line"><span class="string">[3 4 5]</span></span><br><span class="line"><span class="string">[6 7 8]</span></span><br><span class="line"><span class="string">迭代后的数组：</span></span><br><span class="line"><span class="string">0 1 2 3 4 5 6 7 8 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="numpy-ndarray-flatten"><a href="#numpy-ndarray-flatten" class="headerlink" title="numpy.ndarray.flatten"></a>numpy.ndarray.flatten</h4><p>numpy.ndarray.flatten 返回一份数组拷贝，对拷贝所做的修改不会影响原始数组，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndarray.flatten(order=<span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>order：’C’ – 按行，’F’ – 按列，’A’ – 原顺序，’K’ – 元素在内存中的出现顺序。  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;原数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># 默认按行</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;展开的数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a.flatten())</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;以 F 风格顺序展开的数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a.flatten(order = <span class="string">&#x27;F&#x27;</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">原数组：</span></span><br><span class="line"><span class="string">[[0 1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6 7]]</span></span><br><span class="line"><span class="string">展开的数组：</span></span><br><span class="line"><span class="string">[0 1 2 3 4 5 6 7]</span></span><br><span class="line"><span class="string">以 F 风格顺序展开的数组：</span></span><br><span class="line"><span class="string">[0 4 1 5 2 6 3 7]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="numpy-ravel"><a href="#numpy-ravel" class="headerlink" title="numpy.ravel"></a>numpy.ravel</h4><p>numpy.ravel() 展平的数组元素，顺序通常是”C风格”，返回的是数组视图（view，有点类似 C/C++引用reference的意味），修改会影响原始数组。</p><p>该函数接收两个参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.ravel(a, order=&#x27;C&#x27;)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>order：’C’ – 按行，’F’ – 按列，’A’ – 原顺序，’K’ – 元素在内存中的出现顺序。  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;原数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;调用 ravel 函数之后：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a.ravel())</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;以 F 风格顺序调用 ravel 函数之后：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a.ravel(order = <span class="string">&#x27;F&#x27;</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">原数组：</span></span><br><span class="line"><span class="string">[[0 1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6 7]]</span></span><br><span class="line"><span class="string">调用 ravel 函数之后：</span></span><br><span class="line"><span class="string">[0 1 2 3 4 5 6 7]</span></span><br><span class="line"><span class="string">以 F 风格顺序调用 ravel 函数之后：</span></span><br><span class="line"><span class="string">[0 4 1 5 2 6 3 7]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="翻转数组"><a href="#翻转数组" class="headerlink" title="翻转数组"></a>翻转数组</h3><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>transpose</code></td><td align="left">对换数组的维度</td></tr><tr><td align="left"><code>ndarray.T</code></td><td align="left">和 <code>self.transpose()</code> 相同</td></tr><tr><td align="left"><code>rollaxis</code></td><td align="left">向后滚动指定的轴</td></tr><tr><td align="left"><code>swapaxes</code></td><td align="left">对换数组的两个轴</td></tr></tbody></table><h4 id="numpy-transpose"><a href="#numpy-transpose" class="headerlink" title="numpy.transpose"></a>numpy.transpose</h4><p>numpy.transpose 函数用于对换数组的维度，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.transpose(arr, axes)</span><br></pre></td></tr></table></figure><p>参数说明:</p><ul><li><code>arr</code>：要操作的数组</li><li><code>axes</code>：整数列表，对应维度，通常所有维度都会对换。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;原数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a )</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;对换数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.transpose(a))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">原数组：</span></span><br><span class="line"><span class="string">[[ 0  1  2  3]</span></span><br><span class="line"><span class="string"> [ 4  5  6  7]</span></span><br><span class="line"><span class="string"> [ 8  9 10 11]]</span></span><br><span class="line"><span class="string">对换数组：</span></span><br><span class="line"><span class="string">[[ 0  4  8]</span></span><br><span class="line"><span class="string"> [ 1  5  9]</span></span><br><span class="line"><span class="string"> [ 2  6 10]</span></span><br><span class="line"><span class="string"> [ 3  7 11]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>numpy.ndarray.T 类似 numpy.transpose</strong></p><h4 id="numpy-swapaxes"><a href="#numpy-swapaxes" class="headerlink" title="numpy.swapaxes"></a>numpy.swapaxes</h4><p>numpy.swapaxes 函数用于交换数组的两个轴，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.swapaxes(arr, axis1, axis2)</span><br></pre></td></tr></table></figure><ul><li><code>arr</code>：输入的数组</li><li><code>axis1</code>：对应第一个轴的整数</li><li><code>axis2</code>：对应第二个轴的整数</li></ul><h3 id="修改数组维度"><a href="#修改数组维度" class="headerlink" title="修改数组维度"></a>修改数组维度</h3><table><thead><tr><th align="left">维度</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>broadcast</code></td><td align="left">产生模仿广播的对象</td></tr><tr><td align="left"><code>broadcast_to</code></td><td align="left">将数组广播到新形状</td></tr><tr><td align="left"><code>expand_dims</code></td><td align="left">扩展数组的形状</td></tr><tr><td align="left"><code>squeeze</code></td><td align="left">从数组的形状中删除一维条目</td></tr></tbody></table><h4 id="numpy-broadcast"><a href="#numpy-broadcast" class="headerlink" title="numpy.broadcast"></a>numpy.broadcast</h4><p>numpy.broadcast 用于模仿广播的对象，它返回一个对象，该对象封装了将一个数组广播到另一个数组的结果。该函数使用两个数组作为输入参数。</p><h4 id="numpy-broadcast-to"><a href="#numpy-broadcast-to" class="headerlink" title="numpy.broadcast_to"></a>numpy.broadcast_to</h4><p>numpy.broadcast_to 函数将数组广播到新形状。它在原始数组上返回只读视图。 它通常不连续。 如果新形状不符合 NumPy 的广播规则，该函数可能会抛出ValueError。</p><p><code>numpy.broadcast_to(array, shape, subok)</code>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.arange(<span class="number">4</span>).reshape(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;原数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;调用 broadcast_to 函数之后：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.broadcast_to(a,(<span class="number">4</span>,<span class="number">4</span>)))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">原数组：</span></span><br><span class="line"><span class="string">[[0 1 2 3]]</span></span><br><span class="line"><span class="string">调用 broadcast_to 函数之后：</span></span><br><span class="line"><span class="string">[[0 1 2 3]</span></span><br><span class="line"><span class="string"> [0 1 2 3]</span></span><br><span class="line"><span class="string"> [0 1 2 3]</span></span><br><span class="line"><span class="string"> [0 1 2 3]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="numpy-expand-dims"><a href="#numpy-expand-dims" class="headerlink" title="numpy.expand_dims"></a>numpy.expand_dims</h4><p>numpy.expand_dims 函数通过在指定位置插入新的轴来扩展数组形状，函数格式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.expand_dims(arr, axis)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>arr</code>：输入数组</li><li><code>axis</code>：新轴插入的位置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">x = np.array(([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]))</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;数组 x：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (x)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">y = np.expand_dims(x, axis = <span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;数组 y：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (y)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;数组 x 和 y 的形状：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (x.shape, y.shape)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># 在位置 1 插入轴</span></span><br><span class="line">y = np.expand_dims(x, axis = <span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;在位置 1 插入轴之后的数组 y：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (y)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;x.ndim 和 y.ndim：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (x.ndim,y.ndim)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;x.shape 和 y.shape：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (x.shape, y.shape)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">数组 x：</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [3 4]]</span></span><br><span class="line"><span class="string">数组 y：</span></span><br><span class="line"><span class="string">[[[1 2]</span></span><br><span class="line"><span class="string">  [3 4]]]</span></span><br><span class="line"><span class="string">数组 x 和 y 的形状：</span></span><br><span class="line"><span class="string">(2, 2) (1, 2, 2)</span></span><br><span class="line"><span class="string">在位置 1 插入轴之后的数组 y：</span></span><br><span class="line"><span class="string">[[[1 2]]</span></span><br><span class="line"><span class="string"> [[3 4]]]</span></span><br><span class="line"><span class="string">x.ndim 和 y.ndim：</span></span><br><span class="line"><span class="string">2 3</span></span><br><span class="line"><span class="string">x.shape 和 y.shape：</span></span><br><span class="line"><span class="string">(2, 2) (2, 1, 2)&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="numpy-squeeze"><a href="#numpy-squeeze" class="headerlink" title="numpy.squeeze"></a>numpy.squeeze</h4><p>numpy.squeeze 函数从给定数组的形状中删除一维的条目，函数格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.squeeze(arr, axis)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>arr</code>：输入数组</li><li><code>axis</code>：整数或整数元组，用于选择形状中一维条目的子集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">x = np.arange(<span class="number">9</span>).reshape(<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;数组 x：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (x)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">y = np.squeeze(x)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;数组 y：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (y)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;数组 x 和 y 的形状：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (x.shape, y.shape)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">数组 x：</span></span><br><span class="line"><span class="string">[[[0 1 2]</span></span><br><span class="line"><span class="string">  [3 4 5]</span></span><br><span class="line"><span class="string">  [6 7 8]]]</span></span><br><span class="line"><span class="string">数组 y：</span></span><br><span class="line"><span class="string">[[0 1 2]</span></span><br><span class="line"><span class="string"> [3 4 5]</span></span><br><span class="line"><span class="string"> [6 7 8]]</span></span><br><span class="line"><span class="string">数组 x 和 y 的形状：</span></span><br><span class="line"><span class="string">(1, 3, 3) (3, 3)&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="连接数组"><a href="#连接数组" class="headerlink" title="连接数组"></a>连接数组</h3><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>concatenate</code></td><td align="left">连接沿现有轴的数组序列</td></tr><tr><td align="left"><code>stack</code></td><td align="left">沿着新的轴加入一系列数组。</td></tr><tr><td align="left"><code>hstack</code></td><td align="left">水平堆叠序列中的数组（列方向）</td></tr><tr><td align="left"><code>vstack</code></td><td align="left">竖直堆叠序列中的数组（行方向）</td></tr></tbody></table><h4 id="numpy-concatenate"><a href="#numpy-concatenate" class="headerlink" title="numpy.concatenate"></a>numpy.concatenate</h4><p>numpy.concatenate 函数用于沿指定轴连接相同形状的两个或多个数组，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.concatenate((a1, a2, ...), axis)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>a1, a2, ...</code>：相同类型的数组</li><li><code>axis</code>：沿着它连接数组的轴，默认为 0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">b = np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;第二个数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (b)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># 两个数组的维度相同</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;沿轴 0 连接两个数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.concatenate((a,b)))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;沿轴 1 连接两个数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.concatenate((a,b),axis = <span class="number">1</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [3 4]]</span></span><br><span class="line"><span class="string">第二个数组：</span></span><br><span class="line"><span class="string">[[5 6]</span></span><br><span class="line"><span class="string"> [7 8]]</span></span><br><span class="line"><span class="string">沿轴 0 连接两个数组：</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [3 4]</span></span><br><span class="line"><span class="string"> [5 6]</span></span><br><span class="line"><span class="string"> [7 8]</span></span><br><span class="line"><span class="string">沿轴 1 连接两个数组：</span></span><br><span class="line"><span class="string">[[1 2 5 6]</span></span><br><span class="line"><span class="string"> [3 4 7 8]]&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="numpy-stack"><a href="#numpy-stack" class="headerlink" title="numpy.stack"></a>numpy.stack</h4><p>numpy.stack 函数用于沿新轴连接数组序列，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.stack(arrays, axis)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>arrays</code>相同形状的数组序列</li><li><code>axis</code>：返回数组中的轴，输入数组沿着它来堆叠</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">b = np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;第二个数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (b)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;沿轴 0 堆叠两个数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.stack((a,b),<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;沿轴 1 堆叠两个数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.stack((a,b),<span class="number">1</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [3 4]]</span></span><br><span class="line"><span class="string">第二个数组：</span></span><br><span class="line"><span class="string">[[5 6]</span></span><br><span class="line"><span class="string"> [7 8]]</span></span><br><span class="line"><span class="string">沿轴 0 堆叠两个数组：</span></span><br><span class="line"><span class="string">[[[1 2]</span></span><br><span class="line"><span class="string">  [3 4]]</span></span><br><span class="line"><span class="string"> [[5 6]</span></span><br><span class="line"><span class="string">  [7 8]]]</span></span><br><span class="line"><span class="string">沿轴 1 堆叠两个数组：</span></span><br><span class="line"><span class="string">[[[1 2]</span></span><br><span class="line"><span class="string">  [5 6]]</span></span><br><span class="line"><span class="string"> [[3 4]</span></span><br><span class="line"><span class="string">  [7 8]]]&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>numpy.hstack 是 numpy.stack 函数的变体，它通过水平堆叠来生成数组。</p><p>numpy.vstack 是 numpy.stack 函数的变体，它通过垂直堆叠来生成数组。</p><h3 id="分割数组"><a href="#分割数组" class="headerlink" title="分割数组"></a>分割数组</h3><table><thead><tr><th align="left">函数</th><th align="left">数组及操作</th></tr></thead><tbody><tr><td align="left"><code>split</code></td><td align="left">将一个数组分割为多个子数组</td></tr><tr><td align="left"><code>hsplit</code></td><td align="left">将一个数组水平分割为多个子数组（按列）</td></tr><tr><td align="left"><code>vsplit</code></td><td align="left">将一个数组垂直分割为多个子数组（按行）</td></tr></tbody></table><h4 id="numpy-split"><a href="#numpy-split" class="headerlink" title="numpy.split"></a>numpy.split</h4><p>numpy.split 函数沿特定的轴将数组分割为子数组，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.split(ary, indices_or_sections, axis)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>ary</code>：被分割的数组</li><li><code>indices_or_sections</code>：如果是一个整数，就用该数平均切分，如果是一个数组，为沿轴切分的位置（左开右闭）</li><li><code>axis</code>：设置沿着哪个方向进行切分，默认为 0，横向切分，即水平方向。为 1 时，纵向切分，即竖直方向。  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.arange(<span class="number">9</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;将数组分为三个大小相等的子数组：&#x27;</span>)</span><br><span class="line">b = np.split(a,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span> (b)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;将数组在一维数组中表明的位置分割：&#x27;</span>)</span><br><span class="line">b = np.split(a,[<span class="number">4</span>,<span class="number">7</span>])</span><br><span class="line"><span class="built_in">print</span> (b)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[0 1 2 3 4 5 6 7 8]</span></span><br><span class="line"><span class="string">将数组分为三个大小相等的子数组：</span></span><br><span class="line"><span class="string">[array([0, 1, 2]), array([3, 4, 5]), array([6, 7, 8])]</span></span><br><span class="line"><span class="string">将数组在一维数组中表明的位置分割：</span></span><br><span class="line"><span class="string">[array([0, 1, 2, 3]), array([4, 5, 6]), array([7, 8])]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>axis 为 0 时在水平方向分割，axis 为 1 时在垂直方向分割：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;默认分割（0轴）：&#x27;</span>)</span><br><span class="line">b = np.split(a,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;沿水平方向分割：&#x27;</span>)</span><br><span class="line">c = np.split(a,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;沿水平方向分割：&#x27;</span>)</span><br><span class="line">d= np.hsplit(a,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[[ 0  1  2  3]</span></span><br><span class="line"><span class="string"> [ 4  5  6  7]</span></span><br><span class="line"><span class="string"> [ 8  9 10 11]</span></span><br><span class="line"><span class="string"> [12 13 14 15]]</span></span><br><span class="line"><span class="string">默认分割（0轴）：</span></span><br><span class="line"><span class="string">[array([[0, 1, 2, 3],</span></span><br><span class="line"><span class="string">       [4, 5, 6, 7]]), array([[ 8,  9, 10, 11],</span></span><br><span class="line"><span class="string">       [12, 13, 14, 15]])]</span></span><br><span class="line"><span class="string">沿水平方向分割：</span></span><br><span class="line"><span class="string">[array([[ 0,  1],</span></span><br><span class="line"><span class="string">       [ 4,  5],</span></span><br><span class="line"><span class="string">       [ 8,  9],</span></span><br><span class="line"><span class="string">       [12, 13]]), array([[ 2,  3],</span></span><br><span class="line"><span class="string">       [ 6,  7],</span></span><br><span class="line"><span class="string">       [10, 11],</span></span><br><span class="line"><span class="string">       [14, 15]])]</span></span><br><span class="line"><span class="string">沿水平方向分割：</span></span><br><span class="line"><span class="string">[array([[ 0,  1],</span></span><br><span class="line"><span class="string">       [ 4,  5],</span></span><br><span class="line"><span class="string">       [ 8,  9],</span></span><br><span class="line"><span class="string">       [12, 13]]), array([[ 2,  3],</span></span><br><span class="line"><span class="string">       [ 6,  7],</span></span><br><span class="line"><span class="string">       [10, 11],</span></span><br><span class="line"><span class="string">       [14, 15]])]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="numpy-hsplit"><a href="#numpy-hsplit" class="headerlink" title="numpy.hsplit"></a>numpy.hsplit</h4><p>numpy.hsplit 函数用于水平分割数组，通过指定要返回的相同形状的数组数量来拆分原数组。</p><h4 id="numpy-vsplit"><a href="#numpy-vsplit" class="headerlink" title="numpy.vsplit"></a>numpy.vsplit</h4><p>numpy.vsplit 沿着垂直轴分割，其分割方式与hsplit用法相同。</p><h3 id="数组元素的添加与删除"><a href="#数组元素的添加与删除" class="headerlink" title="数组元素的添加与删除"></a>数组元素的添加与删除</h3><table><thead><tr><th align="left">函数</th><th align="left">元素及描述</th></tr></thead><tbody><tr><td align="left"><code>append</code></td><td align="left">将值添加到数组末尾</td></tr><tr><td align="left"><code>insert</code></td><td align="left">沿指定轴将值插入到指定下标之前</td></tr><tr><td align="left"><code>delete</code></td><td align="left">删掉某个轴的子数组，并返回删除后的新数组</td></tr><tr><td align="left"><code>unique</code></td><td align="left">查找数组内的唯一元素</td></tr></tbody></table><h4 id="numpy-append"><a href="#numpy-append" class="headerlink" title="numpy.append"></a>numpy.append</h4><p>numpy.append 函数在数组的末尾添加值。 追加操作会分配整个数组，并把原来的数组复制到新数组中。 此外，输入数组的维度必须匹配否则将生成ValueError。</p><p>append 函数返回的始终是一个一维数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.append(arr, values, axis=None)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p><code>arr</code>：输入数组</p></li><li><p><code>values</code>：要向<code>arr</code>添加的值，需要和<code>arr</code>形状相同（除了要添加的轴）</p></li><li><p><code>axis</code>：默认为 None。当axis无定义时，是横向加成，返回总是为一维数组！当axis有定义的时候，分别为0和1的时候。当axis有定义的时候，分别为0和1的时候（列数要相同）。当axis为1时，数组是加在右边（行数要相同）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;向数组添加元素：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.append(a, [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;沿轴 0 添加元素：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.append(a, [[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]],axis = <span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;沿轴 1 添加元素：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.append(a, [[<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]],axis = <span class="number">1</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]]</span></span><br><span class="line"><span class="string">向数组添加元素：</span></span><br><span class="line"><span class="string">[1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"><span class="string">沿轴 0 添加元素：</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]</span></span><br><span class="line"><span class="string"> [7 8 9]]</span></span><br><span class="line"><span class="string">沿轴 1 添加元素：</span></span><br><span class="line"><span class="string">[[1 2 3 5 5 5]</span></span><br><span class="line"><span class="string"> [4 5 6 7 8 9]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="numpy-insert"><a href="#numpy-insert" class="headerlink" title="numpy.insert"></a>numpy.insert</h4><p>numpy.insert 函数在给定索引之前，沿给定轴在输入数组中插入值。</p><p>如果值的类型转换为要插入，则它与输入数组不同。 插入没有原地的，函数会返回一个新数组。 此外，如果未提供轴，则输入数组会被展开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.insert(arr, obj, values, axis)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>arr</code>：输入数组</li><li><code>obj</code>：在其之前插入值的索引</li><li><code>values</code>：要插入的值</li><li><code>axis</code>：沿着它插入的轴，如果未提供，则输入数组会被展开</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;第一个数组：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;未传递 Axis 参数。 在删除之前输入数组会被展开。&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.insert(a,<span class="number">3</span>,[<span class="number">11</span>,<span class="number">12</span>]))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;传递了 Axis 参数。 会广播值数组来配输入数组。&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;沿轴 0 广播：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.insert(a,<span class="number">1</span>,[<span class="number">11</span>],axis = <span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;沿轴 1 广播：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (np.insert(a,<span class="number">1</span>,<span class="number">11</span>,axis = <span class="number">1</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一个数组：</span></span><br><span class="line"><span class="string">[[1 2]</span></span><br><span class="line"><span class="string"> [3 4]</span></span><br><span class="line"><span class="string"> [5 6]]</span></span><br><span class="line"><span class="string">未传递 Axis 参数。 在删除之前输入数组会被展开。</span></span><br><span class="line"><span class="string">[ 1  2  3 11 12  4  5  6]</span></span><br><span class="line"><span class="string">传递了 Axis 参数。 会广播值数组来配输入数组。</span></span><br><span class="line"><span class="string">沿轴 0 广播：</span></span><br><span class="line"><span class="string">[[ 1  2]</span></span><br><span class="line"><span class="string"> [11 11]</span></span><br><span class="line"><span class="string"> [ 3  4]</span></span><br><span class="line"><span class="string"> [ 5  6]]</span></span><br><span class="line"><span class="string">沿轴 1 广播：</span></span><br><span class="line"><span class="string">[[ 1 11  2]</span></span><br><span class="line"><span class="string"> [ 3 11  4]</span></span><br><span class="line"><span class="string"> [ 5 11  6]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="numpy-delete"><a href="#numpy-delete" class="headerlink" title="numpy.delete"></a>numpy.delete</h4><p>numpy.delete 函数返回从输入数组中删除指定子数组的新数组。 与 insert() 函数的情况一样，如果未提供轴参数，则输入数组将展开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Numpy.delete(arr, obj, axis)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>arr</code>：输入数组</li><li><code>obj</code>：可以被切片，整数或者整数数组，表明要从输入数组删除的子数组</li><li><code>axis</code>：沿着它删除给定子数组的轴，如果未提供，则输入数组会被展开</li></ul><h4 id="numpy-unique"><a href="#numpy-unique" class="headerlink" title="numpy.unique"></a>numpy.unique</h4><p>numpy.unique 函数用于去除数组中的重复元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.unique(arr, return_index, return_inverse, return_counts)</span><br></pre></td></tr></table></figure><ul><li><code>arr</code>：输入数组，如果不是一维数组则会展开</li><li><code>return_index</code>：如果为<code>true</code>，返回新列表元素在旧列表中的位置（下标），并以列表形式储</li><li><code>return_inverse</code>：如果为<code>true</code>，返回旧列表元素在新列表中的位置（下标），并以列表形式储</li><li><code>return_counts</code>：如果为<code>true</code>，<strong>返回去重数组中的元素在原数组中的出现次数</strong></li></ul><h1 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h1><p><strong>Pandas 是 Python 语言的一个扩展程序库，用于数据分析。</strong></p><p>Pandas 是一个开放源码、BSD 许可的库，提供高性能、易于使用的数据结构和数据分析工具。</p><p>Pandas 名字衍生自术语 “panel data”（面板数据）和 “Python data analysis”（Python 数据分析）。</p><p>Pandas 一个强大的分析结构化数据的工具集，基础是 Numpy（提供高性能的矩阵运算）。</p><p>Pandas 可以从各种文件格式比如 CSV、JSON、SQL、Microsoft Excel 导入数据。</p><p>Pandas 可以对各种数据进行运算操作，比如归并、再成形、选择，还有数据清洗和数据加工特征。</p><p>Pandas 广泛应用在学术、金融、统计学等各个数据分析领域。</p><p>Pandas 的主要数据结构是 Series （一维数据）与 DataFrame（二维数据），这两种数据结构足以处理金融、统计、社会科学、工程等领域里的大多数典型用例。  </p><p><strong>Series</strong> 是一种类似于一维数组的对象，它由一组数据（各种Numpy数据类型）以及一组与之相关的数据标签（即索引）组成。</p><p><strong>DataFrame</strong> 是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔型值）。DataFrame 既有行索引也有列索引，它可以被看做由 Series 组成的字典（共同用一个索引）。</p><h2 id="简单的Pandas实列"><a href="#简单的Pandas实列" class="headerlink" title="简单的Pandas实列"></a>简单的Pandas实列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.__version__ </span><br><span class="line"><span class="comment"># 输出： 1.5.3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个简单的 pandas 实例：</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">mydataset = &#123;</span><br><span class="line">  <span class="string">&#x27;sites&#x27;</span>: [<span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Runoob&quot;</span>, <span class="string">&quot;Wiki&quot;</span>],</span><br><span class="line">  <span class="string">&#x27;number&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myvar = pd.DataFrame(mydataset)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    sites  number</span></span><br><span class="line"><span class="string">0  Google       1</span></span><br><span class="line"><span class="string">1  Runoob       2</span></span><br><span class="line"><span class="string">2    Wiki       3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><p>Pandas Series <strong>类似表格中的一个列（column），类似于一维数组</strong>，可以保存任何数据类型。</p><p>Series 由索引（index）和列组成，函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.Series( data, index, dtype, name, copy)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>data</strong>：一组数据(ndarray 类型)。</li><li><strong>index</strong>：数据索引标签，如果不指定，默认从 0 开始。</li><li><strong>dtype</strong>：数据类型，默认会自己判断。</li><li><strong>name</strong>：设置名称。</li><li><strong>copy</strong>：拷贝数据，默认为 False。</li></ul><p>创建一个简单的 Series 实例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">myvar = pd.Series(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0    1</span></span><br><span class="line"><span class="string">1    2</span></span><br><span class="line"><span class="string">2    3</span></span><br><span class="line"><span class="string">dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从上图可知，如果没有指定索引，索引值就从 0 开始，我们可以根据索引值读取数据：</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">myvar = pd.Series(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 输出： 2</span></span><br></pre></td></tr></table></figure><p>我们可以指定索引值，如下实例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">a = [<span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Runoob&quot;</span>, <span class="string">&quot;Wiki&quot;</span>]</span><br><span class="line"></span><br><span class="line">myvar = pd.Series(a, index = [<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">x    Google</span></span><br><span class="line"><span class="string">y    Runoob</span></span><br><span class="line"><span class="string">z      Wiki</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据索引值读取数据:</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">a = [<span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Runoob&quot;</span>, <span class="string">&quot;Wiki&quot;</span>]</span><br><span class="line"></span><br><span class="line">myvar = pd.Series(a, index = [<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar[<span class="string">&quot;y&quot;</span>])</span><br><span class="line"><span class="comment"># 输出： Runoob</span></span><br></pre></td></tr></table></figure><p>也可以使用 key/value 对象，类似字典来创建 Series：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">sites = &#123;<span class="number">1</span>: <span class="string">&quot;Google&quot;</span>, <span class="number">2</span>: <span class="string">&quot;Runoob&quot;</span>, <span class="number">3</span>: <span class="string">&quot;Wiki&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">myvar = pd.Series(sites)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1    Google</span></span><br><span class="line"><span class="string">2    Runoob</span></span><br><span class="line"><span class="string">3      Wiki</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 上述代码可知：字典的 key 变成了索引值。如果我们只需要字典中的一部分数据，只需要指定需要数据的索引即可，如下实例：</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">sites = &#123;<span class="number">1</span>: <span class="string">&quot;Google&quot;</span>, <span class="number">2</span>: <span class="string">&quot;Runoob&quot;</span>, <span class="number">3</span>: <span class="string">&quot;Wiki&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">myvar = pd.Series(sites, index = [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1    Google</span></span><br><span class="line"><span class="string">2    Runoob</span></span><br><span class="line"><span class="string">dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>设置 Series 名称参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">sites = &#123;<span class="number">1</span>: <span class="string">&quot;Google&quot;</span>, <span class="number">2</span>: <span class="string">&quot;Runoob&quot;</span>, <span class="number">3</span>: <span class="string">&quot;Wiki&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">myvar = pd.Series(sites, index = [<span class="number">1</span>, <span class="number">2</span>], name=<span class="string">&quot;RUNOOB-Series-TEST&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1    Google</span></span><br><span class="line"><span class="string">2    Runoob</span></span><br><span class="line"><span class="string">Name: RUNOOB-Series-TEST, dtype: object</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>DataFrame 是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔型值）。DataFrame 既有行索引也有列索引，它可以被看做由 Series 组成的字典（共同用一个索引）。</p><p><img src="fa288682/df-dp.png" alt="df-dp.png"></p><p>DataFrame 构造方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.DataFrame( data, index, columns, dtype, copy)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>data</strong>：一组数据(ndarray、series, map, lists, dict 等类型)。</li><li><strong>index</strong>：索引值，或者可以称为行标签。</li><li><strong>columns</strong>：列标签，默认为 RangeIndex (0, 1, 2, …, n) 。</li><li><strong>dtype</strong>：数据类型。</li><li><strong>copy</strong>：拷贝数据，默认为 False。</li></ul><p>DataFrame 是一个二维的数组结构，类似二维数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = [[<span class="string">&#x27;Google&#x27;</span>, <span class="number">10</span>], [<span class="string">&#x27;Runoob&#x27;</span>, <span class="number">12</span>], [<span class="string">&#x27;Wiki&#x27;</span>, <span class="number">13</span>]]</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data, columns=[<span class="string">&#x27;Site&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     Site  Age</span></span><br><span class="line"><span class="string">0  Google   10</span></span><br><span class="line"><span class="string">1  Runoob   12</span></span><br><span class="line"><span class="string">2    Wiki   13</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;Site&#x27;</span>:[<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Wiki&#x27;</span>], <span class="string">&#x27;Age&#x27;</span>:[<span class="number">10</span>, <span class="number">12</span>, <span class="number">13</span>]&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">     Site  Age</span></span><br><span class="line"><span class="string">0  Google   10</span></span><br><span class="line"><span class="string">1  Runoob   12</span></span><br><span class="line"><span class="string">2    Wiki   13</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>从以上输出结果可以知道， DataFrame 数据类型一个表格，包含 rows（行） 和 columns（列）</p><p>还可以使用字典（key/value），其中字典的 key 为列名:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = [&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;,&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">20</span>&#125;]</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (df)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   a   b     c</span></span><br><span class="line"><span class="string">0  1   2   NaN</span></span><br><span class="line"><span class="string">1  5  10  20.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 没有对应的部分数据为 NaN。</span></span><br></pre></td></tr></table></figure><p>Pandas 可以使用 <strong>loc</strong> 属性返回指定行的数据，如果没有设置索引，第一行索引为 <strong>0</strong>，第二行索引为 <strong>1</strong>，以此类推：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;calories&quot;</span>: [<span class="number">420</span>, <span class="number">380</span>, <span class="number">390</span>],</span><br><span class="line">  <span class="string">&quot;duration&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据载入到 DataFrame 对象</span></span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回第一行</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 返回第二行</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="number">1</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">calories    420</span></span><br><span class="line"><span class="string">duration     50</span></span><br><span class="line"><span class="string">Name: 0, dtype: int64</span></span><br><span class="line"><span class="string">calories    380</span></span><br><span class="line"><span class="string">duration     40</span></span><br><span class="line"><span class="string">Name: 1, dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>也可以返回多行数据，使用 <strong>[[ … ]]</strong> 格式，**…** 为各行的索引，以逗号隔开：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;calories&quot;</span>: [<span class="number">420</span>, <span class="number">380</span>, <span class="number">390</span>],</span><br><span class="line">  <span class="string">&quot;duration&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据载入到 DataFrame 对象</span></span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回第一行和第二行</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[[<span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   calories  duration</span></span><br><span class="line"><span class="string">0       420        50</span></span><br><span class="line"><span class="string">1       380        40</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>我们可以指定索引值，如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pandas 可以使用 loc 属性返回指定索引对应到某一行：</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;calories&quot;</span>: [<span class="number">420</span>, <span class="number">380</span>, <span class="number">390</span>],</span><br><span class="line">  <span class="string">&quot;duration&quot;</span>: [<span class="number">50</span>, <span class="number">40</span>, <span class="number">45</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data, index = [<span class="string">&quot;day1&quot;</span>, <span class="string">&quot;day2&quot;</span>, <span class="string">&quot;day3&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定索引</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&quot;day2&quot;</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">calories    380</span></span><br><span class="line"><span class="string">duration     40</span></span><br><span class="line"><span class="string">Name: day2, dtype: int64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Pandas-CSV-文件"><a href="#Pandas-CSV-文件" class="headerlink" title="Pandas CSV 文件"></a>Pandas CSV 文件</h2><p>CSV（Comma-Separated Values，逗号分隔值，有时也称为字符分隔值，因为分隔字符也可以不是逗号），其文件以纯文本形式存储表格数据（数字和文本）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;nba.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br></pre></td></tr></table></figure><p><strong>to_string()</strong> 用于返回 DataFrame 类型的数据，如果不使用该函数，则输出结果为数据的前面 5 行和末尾 5 行，中间部分以 <strong>…</strong> 代替。</p><p>我们也可以使用 <strong>to_csv()</strong> 方法将 DataFrame 存储为 csv 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 三个字段 name, site, age</span></span><br><span class="line">nme = [<span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Runoob&quot;</span>, <span class="string">&quot;Taobao&quot;</span>, <span class="string">&quot;Wiki&quot;</span>]</span><br><span class="line">st = [<span class="string">&quot;www.google.com&quot;</span>, <span class="string">&quot;www.runoob.com&quot;</span>, <span class="string">&quot;www.taobao.com&quot;</span>, <span class="string">&quot;www.wikipedia.org&quot;</span>]</span><br><span class="line">ag = [<span class="number">90</span>, <span class="number">40</span>, <span class="number">80</span>, <span class="number">98</span>]</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;name&#x27;</span>: nme, <span class="string">&#x27;site&#x27;</span>: st, <span class="string">&#x27;age&#x27;</span>: ag&#125;</span><br><span class="line">     </span><br><span class="line">df = pd.DataFrame(<span class="built_in">dict</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 保存 dataframe</span></span><br><span class="line">df.to_csv(<span class="string">&#x27;site.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>head(n)</strong> 方法用于读取前面的 n 行，如果不填参数 n ，默认返回 5 行。</p><p><strong>tail(n)</strong> 方法用于读取尾部的 n 行，如果不填参数 n ，默认返回 5 行，空行各个字段的值返回 <strong>NaN</strong>。</p><p><strong>info()</strong> 方法返回表格的一些基本信息。</p><h2 id="Pandas-数据清洗"><a href="#Pandas-数据清洗" class="headerlink" title="Pandas 数据清洗"></a>Pandas 数据清洗</h2><h3 id="清洗空值"><a href="#清洗空值" class="headerlink" title="清洗空值"></a>清洗空值</h3><p>如果我们要删除包含空字段的行，可以使用 <strong>dropna()</strong> 方法，语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.dropna(axis=<span class="number">0</span>, how=<span class="string">&#x27;any&#x27;</span>, thresh=<span class="literal">None</span>, subset=<span class="literal">None</span>, inplace=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li>axis：默认为 <strong>0</strong>，表示逢空值剔除整行，如果设置参数 <strong>axis＝1</strong> 表示逢空值去掉整列。</li><li>how：默认为 <strong>‘any’</strong> 如果一行（或一列）里任何一个数据有出现 NA 就去掉整行，如果设置 <strong>how=’all’</strong> 一行（或列）都是 NA 才去掉这整行。</li><li>thresh：设置需要多少非空值的数据才可以保留下来的。</li><li>subset：设置想要检查的列。如果是多个列，可以使用列名的 list 作为参数。</li><li>inplace：如果设置 True，将计算得到的值直接覆盖之前的值并返回 None，修改的是源数据。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>古诗文</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>古诗文鉴赏</p><h1 id="归去来兮辞"><a href="#归去来兮辞" class="headerlink" title="归去来兮辞"></a>归去来兮辞</h1><p>&emsp;&emsp;作者：陶渊明   朝代：魏晋</p><h2 id="原文"><a href="#原文" class="headerlink" title="原文:"></a>原文:</h2><p>&emsp;余家贫，耕植不足以自给。幼稚盈室，瓶无储粟，生生所资，未见其术。亲故多劝余为长吏，脱然有怀，求之靡途。会有四方之事，诸侯以惠爱为德，家叔以余贫苦，遂见用于小邑。于时风波未静，心惮远役，彭泽去家百里，公田之利，足以为酒。故便求之。及少日，眷然有归欤之情。何则？质性自然，非矫厉所得。饥冻虽切，违己交病。尝从人事，皆口腹自役。于是怅然慷慨，深愧平生之志。犹望一稔，当敛裳宵逝。寻程氏妹丧于武昌，情在骏奔，自免去职。仲秋至冬，在官八十余日。因事顺心，命篇曰《归去来兮》。乙巳岁十一月也。</p><p>&emsp;归去来兮，田园将芜胡不归？既自以心为形役，奚惆怅而独悲？悟已往之不谏，知来者之可追。实迷途其未远，觉今是而昨非。舟遥遥以轻飏，风飘飘而吹衣。问征夫以前路，恨晨光之熹微。</p><p>&emsp;乃瞻衡宇，载欣载奔。僮仆欢迎，稚子候门。三径就荒，松菊犹存。携幼入室，有酒盈樽。引壶觞以自酌，眄庭柯以怡颜。倚南窗以寄傲，审容膝之易安。园日涉以成趣，门虽设而常关。策扶老以流憩，时矫首而遐观。云无心以出岫，鸟倦飞而知还。景翳翳以将入，抚孤松而盘桓。</p><p>&emsp;归去来兮，请息交以绝游。世与我而相违，复驾言兮焉求？悦亲戚之情话，乐琴书以消忧。农人告余以春及，将有事于西畴。或命巾车，或棹孤舟。既窈窕以寻壑，亦崎岖而经丘。木欣欣以向荣，泉涓涓而始流。善万物之得时，感吾生之行休。</p><p>&emsp;已矣乎！寓形宇内复几时？曷不委心任去留？胡为乎遑遑欲何之？富贵非吾愿，帝乡不可期。怀良辰以孤往，或植杖而耘耔。登东皋以舒啸，临清流而赋诗。聊乘化以归尽，乐夫天命复奚疑！</p><h2 id="译文"><a href="#译文" class="headerlink" title="译文:"></a>译文:</h2><p>&emsp;我家贫穷，种田不能够自给。孩子很多，米缸里没有存粮，维持生活所需的一切，没有办法解决。亲友大都劝我去做官，我心里也有这个念头，可是求官缺少门路。正赶上有奉使外出的官吏，地方大吏以爱惜人才为美德，叔父也因为我家境贫苦（替我设法），我就被委任到小县做官。那时社会上动荡不安，心里惧怕到远地当官。彭泽县离家一百里，公田收获的粮食，足够造酒饮用，所以就请求去那里。等到过了一些日子，便产生了留恋故园的怀乡感情。那是为什么？本性任其自然，这是勉强不得的；饥寒虽然来得急迫，但是违背本意去做官，身心都感痛苦。过去为官做事，都是为了吃饭而役使自己。于是惆怅感慨，深深有愧于平生的志愿。只再等上一年，便收拾行装连夜离去。不久，嫁到程家的妹妹在武昌去世，去吊丧的心情像骏马奔驰一样急迫，自己请求免去官职。自立秋第二个月到冬天，在职共八十多天。因辞官而顺遂了心愿，写了一篇文章，题目叫《归去来兮》。这时候正是乙巳年（晋安帝义熙元年）十一月。</p><p>&emsp;回家去吧！田园快要荒芜了，为什么不回去呢？既然自己使心为身所驱役，又何必怅惘而独自悲戚呢？认识到过去的错误已经不可挽回，知道未来的事还来得及补救。确实走入了迷途大概还不远，已觉悟到现在的做法是对的而曾经的行为是错的。船在水上轻轻飘荡，微风吹拂着衣裳。向行人打听前面的路，遗憾的是天刚刚放亮。</p><p>&emsp;刚刚看到自己简陋的家门，我心中欣喜，奔跑过去。童仆欢喜地前来迎接，孩子们守候在门前或院子里。院子里的小路快要荒芜了，松树菊花还长在那里；带着孩子们进了屋，美酒已经盛满了酒樽。我端起酒壶酒杯自斟自饮，观赏着庭树（使我）露出愉快的神色；倚着南窗寄托我的傲世之情，深知这狭小之地容易使我心安。每天（独自）在园中散步，成为乐趣,小园的门经常地关闭着；拄着拐杖走走歇歇，时时抬头望着远方（的天空）。白云自然而然地从山峰飘浮而出，倦飞的小鸟也知道飞回巢中；日光暗淡，即将落山，我流连不忍离去，手抚着孤松徘徊不已。</p><p>&emsp;回去吧！让我同外界断绝交游。他们的一切都跟我的志趣不合，还要驾车出去追求什么？跟亲戚朋友谈心使我愉悦，弹琴读书能使我忘记忧愁；农夫把春天到了的消息告诉了我，将要去西边的田地耕作。有时驾着有布篷的小车，有时划着一条小船，沿着幽深曲折的山谷，经过道路崎岖的山丘。树木欣欣向荣，泉水缓缓流动，（我）羡慕万物恰逢繁荣滋长的季节，感叹自己一生行将告终。</p><p>&emsp;算了吧！身体寄托在天地间还能有多少时候？为什么不随心所欲，听凭自然的生死？为什么心神不定，还想去什么地方？富贵不是我所求，升入仙界也没有希望。爱惜那良辰美景我独自去欣赏，要不就扶杖锄草耕种；登上东边山坡我放声长啸，傍着清清的溪流把诗歌吟唱；姑且顺随自然的变化，度到生命的尽头。乐天安命，还有什么可疑虑的呢？  </p><h1 id="水调歌头·明月几时有"><a href="#水调歌头·明月几时有" class="headerlink" title="水调歌头·明月几时有"></a>水调歌头·明月几时有</h1><p>&emsp;&emsp;作者：苏轼  朝代：宋  </p><h2 id="原文-1"><a href="#原文-1" class="headerlink" title="原文"></a>原文</h2><p>&emsp;&emsp;丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</p><p>&emsp;&emsp;明月几时有？把酒问青天。不知天上宫阙，今夕是何年。我欲乘风归去，又恐琼楼玉宇，高处不胜寒。起舞弄清影，何似在人间。</p><p>&emsp;&emsp;转朱阁，低绮户，照无眠。不应有恨，何事长向别时圆？人有悲欢离合，月有阴晴圆缺，此事古难全。但愿人长久，千里共婵娟。  </p><h2 id="译文-1"><a href="#译文-1" class="headerlink" title="译文"></a>译文</h2><p>&emsp;&emsp;丙辰年（公元1076年）的中秋节，通宵痛饮直至天明，大醉，趁兴写下这篇文章，同时抒发对弟弟子由的怀念之情。</p><p>&emsp;&emsp;像中秋佳节如此明月几时能有？我拿着酒杯遥问苍天。不知道高遥在上的宫阙，现在又是什么日子。我想凭借着风力回到天上去看一看，又担心美玉砌成的楼宇太高了，我经受不住寒冷。起身舞蹈玩赏着月光下自己清朗的影子，月宫哪里比得上人间烟火暖人心肠。  </p><p>&emsp;&emsp;月儿移动，转过了朱红色的楼阁，低低地挂在雕花的窗户上，照着没有睡意的人。明月不应该对人们有什么怨恨吧，可又为什么总是在人们离别之时才圆呢？人生本就有悲欢离合，月儿常有圆缺，这样的好事自古就难以两全。只希望这世上所有人的亲人都能平安健康长寿，即使相隔千里也能共赏明月。</p><h1 id="题都城南庄"><a href="#题都城南庄" class="headerlink" title="题都城南庄"></a>题都城南庄</h1><p>&emsp;&emsp;作者：崔护 朝代：唐  </p><h2 id="原文-2"><a href="#原文-2" class="headerlink" title="原文"></a>原文</h2><p>去年今日此门中，人面桃花相映红。<br>人面不知何处去，桃花依旧笑春风。</p><h2 id="译文-2"><a href="#译文-2" class="headerlink" title="译文"></a>译文</h2><p>去年的这个时候，我从这扇门里望去，只见那美丽的脸庞和桃花彼此相互映衬的绯红。<br>今日再来此地，那丽人已不知所踪，只有桃花依旧，含笑怒放春风之中。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>都：国都，指唐朝京城长安。<br>人面：指姑娘的脸。第三句中“人面”指代姑娘。<br>不知：一作“秖（zhǐ）今”。去：一作“在”。<br>笑：形容桃花盛开的样子。</p><p><a href="https://gamma.app/docs/yy9emd8pu50u4oe?token=&following_id=9unnmokgi102160&follow_on_start=true">英文</a></p><p><a href="https://gamma.app/docs/1btqs4ihgyyjwen?token=&following_id=9unnmokgi102160&follow_on_start=true">中文</a></p>]]></content>
      
      
      <categories>
          
          <category> 语文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古诗文 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
